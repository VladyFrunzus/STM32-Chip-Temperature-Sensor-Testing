
Temp_sensor_test_si_mai_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006838  08006838  00016838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069a8  080069a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08006a28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08006a28  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d66a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc2  00000000  00000000  0002d74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000933  00000000  00000000  0002ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002644a  00000000  00000000  0003091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3be  00000000  00000000  00056d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaf29  00000000  00000000  00066123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003aa8  00000000  00000000  0015104c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00154af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006820 	.word	0x08006820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006820 	.word	0x08006820

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <I2C_ReInit>:
void I2C_BusReset(void);
void UART_Log(char *message);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void I2C_ReInit(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    HAL_I2C_DeInit(&hi2c1);
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <I2C_ReInit+0x14>)
 8000efa:	f001 f974 	bl	80021e6 <HAL_I2C_DeInit>
    MX_I2C1_Init();
 8000efe:	f000 fa23 	bl	8001348 <MX_I2C1_Init>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <I2C_CheckError>:

HAL_StatusTypeDef I2C_CheckError(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
    if (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 3, 1000) != HAL_OK) {
 8000f18:	8879      	ldrh	r1, [r7, #2]
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	2203      	movs	r2, #3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f001 fb9d 	bl	8002660 <HAL_I2C_IsDeviceReady>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <I2C_CheckError+0x48>
        uint32_t errorCode = HAL_I2C_GetError(hi2c);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f001 fca0 	bl	8002872 <HAL_I2C_GetError>
 8000f32:	64f8      	str	r0, [r7, #76]	; 0x4c
        char errorMsg[64];
        sprintf(errorMsg, "I2C Error: 0x%lx\r\n", errorCode);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f3a:	4909      	ldr	r1, [pc, #36]	; (8000f60 <I2C_CheckError+0x54>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 f893 	bl	8005068 <siprintf>
        UART_Log(errorMsg);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f84c 	bl	8000fe4 <UART_Log>
        I2C_ReInit();
 8000f4c:	f7ff ffd2 	bl	8000ef4 <I2C_ReInit>
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <I2C_CheckError+0x4a>
    }
    return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3750      	adds	r7, #80	; 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08006838 	.word	0x08006838

08000f64 <I2C_BusReset>:

void I2C_BusReset(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
    HAL_I2C_DeInit(&hi2c1);
 8000f78:	4818      	ldr	r0, [pc, #96]	; (8000fdc <I2C_BusReset+0x78>)
 8000f7a:	f001 f934 	bl	80021e6 <HAL_I2C_DeInit>
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_8;
 8000f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f82:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f84:	2311      	movs	r3, #17
 8000f86:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <I2C_BusReset+0x7c>)
 8000f96:	f000 fdd5 	bl	8001b44 <HAL_GPIO_Init>
    for (int i = 0; i < 9; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e014      	b.n	8000fca <I2C_BusReset+0x66>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <I2C_BusReset+0x7c>)
 8000fa8:	f001 f86a 	bl	8002080 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f000 fcbf 	bl	8001930 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <I2C_BusReset+0x7c>)
 8000fba:	f001 f861 	bl	8002080 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fcb6 	bl	8001930 <HAL_Delay>
    for (int i = 0; i < 9; i++) {
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	dde7      	ble.n	8000fa0 <I2C_BusReset+0x3c>
    }
    MX_I2C1_Init();
 8000fd0:	f000 f9ba 	bl	8001348 <MX_I2C1_Init>
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000008c 	.word	0x2000008c
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <UART_Log>:

void UART_Log(char *message) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <UART_Log+0x28>)
 8000ffe:	f003 fadb 	bl	80045b8 <HAL_UART_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000e0 	.word	0x200000e0

08001010 <main>:

int main(void) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b0ac      	sub	sp, #176	; 0xb0
 8001014:	af02      	add	r7, sp, #8
     HAL_Init();
 8001016:	f000 fc0f 	bl	8001838 <HAL_Init>
    SystemClock_Config();
 800101a:	f000 f943 	bl	80012a4 <SystemClock_Config>
    MX_GPIO_Init();
 800101e:	f000 fa03 	bl	8001428 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8001022:	f000 f9d1 	bl	80013c8 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8001026:	f000 f98f 	bl	8001348 <MX_I2C1_Init>

    while (1) {
        uint8_t buf[12];
        int8_t val_bfc;
        float val_afc = 0.0f;
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        uint8_t auxbuf[12];
        char sign = ' ';
 8001032:	2320      	movs	r3, #32
 8001034:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

        buf[0] = REG_CONFIG;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
        buf[1] = 0x60; // Example configuration value
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        char AuxilMsg[64];
        sprintf(AuxilMsg, "While loop reset \r\n");
 8001044:	463b      	mov	r3, r7
 8001046:	498c      	ldr	r1, [pc, #560]	; (8001278 <main+0x268>)
 8001048:	4618      	mov	r0, r3
 800104a:	f004 f80d 	bl	8005068 <siprintf>
        HAL_UART_Transmit(&huart2, AuxilMsg , strlen(AuxilMsg), HAL_MAX_DELAY);
 800104e:	463b      	mov	r3, r7
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	4639      	mov	r1, r7
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	4886      	ldr	r0, [pc, #536]	; (800127c <main+0x26c>)
 8001062:	f003 faa9 	bl	80045b8 <HAL_UART_Transmit>

        if (I2C_CheckError(&hi2c1, TCN75_ADDR << 1) == HAL_OK) {
 8001066:	2198      	movs	r1, #152	; 0x98
 8001068:	4885      	ldr	r0, [pc, #532]	; (8001280 <main+0x270>)
 800106a:	f7ff ff4f 	bl	8000f0c <I2C_CheckError>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 80f0 	bne.w	8001256 <main+0x246>

        	sprintf(AuxilMsg, "I2C OK \r\n");
 8001076:	463b      	mov	r3, r7
 8001078:	4982      	ldr	r1, [pc, #520]	; (8001284 <main+0x274>)
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fff4 	bl	8005068 <siprintf>
        	HAL_UART_Transmit(&huart2, AuxilMsg , strlen(AuxilMsg), HAL_MAX_DELAY);
 8001080:	463b      	mov	r3, r7
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8a4 	bl	80001d0 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	4639      	mov	r1, r7
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	487a      	ldr	r0, [pc, #488]	; (800127c <main+0x26c>)
 8001094:	f003 fa90 	bl	80045b8 <HAL_UART_Transmit>

            HAL_I2C_Master_Transmit(&hi2c1, TCN75_ADDR << 1, buf, 2, HAL_MAX_DELAY);
 8001098:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2302      	movs	r3, #2
 80010a4:	2198      	movs	r1, #152	; 0x98
 80010a6:	4876      	ldr	r0, [pc, #472]	; (8001280 <main+0x270>)
 80010a8:	f001 f8cc 	bl	8002244 <HAL_I2C_Master_Transmit>
            buf[0] = REG_TEMP;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            sprintf(AuxilMsg, "First transmission complete \r\n");
 80010b2:	463b      	mov	r3, r7
 80010b4:	4974      	ldr	r1, [pc, #464]	; (8001288 <main+0x278>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 ffd6 	bl	8005068 <siprintf>
            HAL_UART_Transmit(&huart2, AuxilMsg , strlen(AuxilMsg), HAL_MAX_DELAY);
 80010bc:	463b      	mov	r3, r7
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f886 	bl	80001d0 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4639      	mov	r1, r7
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	486b      	ldr	r0, [pc, #428]	; (800127c <main+0x26c>)
 80010d0:	f003 fa72 	bl	80045b8 <HAL_UART_Transmit>

            HAL_I2C_Master_Transmit(&hi2c1, TCN75_ADDR << 1, buf, 1, HAL_MAX_DELAY);
 80010d4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2198      	movs	r1, #152	; 0x98
 80010e2:	4867      	ldr	r0, [pc, #412]	; (8001280 <main+0x270>)
 80010e4:	f001 f8ae 	bl	8002244 <HAL_I2C_Master_Transmit>

            sprintf(AuxilMsg, "Second transmission complete \r\n");
 80010e8:	463b      	mov	r3, r7
 80010ea:	4968      	ldr	r1, [pc, #416]	; (800128c <main+0x27c>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 ffbb 	bl	8005068 <siprintf>
            HAL_UART_Transmit(&huart2, AuxilMsg , strlen(AuxilMsg), HAL_MAX_DELAY);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f86b 	bl	80001d0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4639      	mov	r1, r7
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	485d      	ldr	r0, [pc, #372]	; (800127c <main+0x26c>)
 8001106:	f003 fa57 	bl	80045b8 <HAL_UART_Transmit>

            HAL_I2C_Master_Receive(&hi2c1, (TCN75_ADDR << 1) | 0x01, buf, 2, HAL_MAX_DELAY);
 800110a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	2199      	movs	r1, #153	; 0x99
 8001118:	4859      	ldr	r0, [pc, #356]	; (8001280 <main+0x270>)
 800111a:	f001 f9ab 	bl	8002474 <HAL_I2C_Master_Receive>

            sprintf(AuxilMsg, "Receiving complete \r\n");
 800111e:	463b      	mov	r3, r7
 8001120:	495b      	ldr	r1, [pc, #364]	; (8001290 <main+0x280>)
 8001122:	4618      	mov	r0, r3
 8001124:	f003 ffa0 	bl	8005068 <siprintf>
            HAL_UART_Transmit(&huart2, AuxilMsg , strlen(AuxilMsg), HAL_MAX_DELAY);
 8001128:	463b      	mov	r3, r7
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f850 	bl	80001d0 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	4639      	mov	r1, r7
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	4850      	ldr	r0, [pc, #320]	; (800127c <main+0x26c>)
 800113c:	f003 fa3c 	bl	80045b8 <HAL_UART_Transmit>

            if(buf[0] >= 0x80)
 8001140:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001144:	b25b      	sxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	da0d      	bge.n	8001166 <main+0x156>
            {sign = '-';
 800114a:	232d      	movs	r3, #45	; 0x2d
 800114c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            auxbuf[0] = buf[0] - 0x80;
 8001150:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001154:	3b80      	subs	r3, #128	; 0x80
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            auxbuf[1] = buf[1];
 800115c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001160:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8001164:	e007      	b.n	8001176 <main+0x166>
            }
            else
            {
            auxbuf[0] = buf[0];
 8001166:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800116a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            auxbuf[1] = buf[1];
 800116e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001172:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
            }

            val_bfc = (uint8_t) auxbuf[0];
 8001176:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800117a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            for (int i = 0; i < 8; ++i) {
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001184:	e03c      	b.n	8001200 <main+0x1f0>
                if (auxbuf[1] & (1 << i)) {
 8001186:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800118a:	461a      	mov	r2, r3
 800118c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001190:	fa42 f303 	asr.w	r3, r2, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02c      	beq.n	80011f6 <main+0x1e6>
                    val_afc += 1 / pow(2, 8-i);
 800119c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a0:	f1c3 0308 	rsb	r3, r3, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001270 <main+0x260>
 80011b6:	f004 fbfb 	bl	80059b0 <pow>
 80011ba:	ec53 2b10 	vmov	r2, r3, d0
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <main+0x284>)
 80011c4:	f7ff fb42 	bl	800084c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f854 	bl	800028c <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcb4 	bl	8000b58 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            for (int i = 0; i < 8; ++i) {
 80011f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011fa:	3301      	adds	r3, #1
 80011fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001204:	2b07      	cmp	r3, #7
 8001206:	ddbe      	ble.n	8001186 <main+0x176>
                }
            }

            val_afc *= 100;
 8001208:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800120c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001298 <main+0x288>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

            char tempMsg[64];
            sprintf(tempMsg, "Temperature: %c%d.%02d C\r\n", sign, val_bfc, (int)val_afc);
 8001218:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 800121c:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 8001220:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 1a90 	vmov	r1, s15
 800122c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001230:	9100      	str	r1, [sp, #0]
 8001232:	491a      	ldr	r1, [pc, #104]	; (800129c <main+0x28c>)
 8001234:	f003 ff18 	bl	8005068 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)tempMsg, strlen(tempMsg), HAL_MAX_DELAY);
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	4618      	mov	r0, r3
 800123e:	f7fe ffc7 	bl	80001d0 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <main+0x26c>)
 8001250:	f003 f9b2 	bl	80045b8 <HAL_UART_Transmit>
 8001254:	e004      	b.n	8001260 <main+0x250>
        } else {
              UART_Log("I2C Error. Resetting...\r\n");
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <main+0x290>)
 8001258:	f7ff fec4 	bl	8000fe4 <UART_Log>
            I2C_BusReset();
 800125c:	f7ff fe82 	bl	8000f64 <I2C_BusReset>
        }

        HAL_Delay(500);
 8001260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001264:	f000 fb64 	bl	8001930 <HAL_Delay>
    while (1) {
 8001268:	e6df      	b.n	800102a <main+0x1a>
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	0800684c 	.word	0x0800684c
 800127c:	200000e0 	.word	0x200000e0
 8001280:	2000008c 	.word	0x2000008c
 8001284:	08006860 	.word	0x08006860
 8001288:	0800686c 	.word	0x0800686c
 800128c:	0800688c 	.word	0x0800688c
 8001290:	080068ac 	.word	0x080068ac
 8001294:	3ff00000 	.word	0x3ff00000
 8001298:	42c80000 	.word	0x42c80000
 800129c:	080068c4 	.word	0x080068c4
 80012a0:	080068e0 	.word	0x080068e0

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	; 0x58
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2244      	movs	r2, #68	; 0x44
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fef8 	bl	80050a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ca:	f001 fe15 	bl	8002ef8 <HAL_PWREx_ControlVoltageScaling>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012d4:	f000 f90e 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2310      	movs	r3, #16
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ea:	2302      	movs	r3, #2
 80012ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012f2:	230a      	movs	r3, #10
 80012f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012f6:	2307      	movs	r3, #7
 80012f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012fe:	2302      	movs	r3, #2
 8001300:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fe4c 	bl	8002fa4 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001312:	f000 f8ef 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2303      	movs	r3, #3
 800131c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	2104      	movs	r1, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fa14 	bl	800375c <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800133a:	f000 f8db 	bl	80014f4 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3758      	adds	r7, #88	; 0x58
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_I2C1_Init+0x74>)
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <MX_I2C1_Init+0x78>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_I2C1_Init+0x74>)
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <MX_I2C1_Init+0x7c>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_I2C1_Init+0x74>)
 8001360:	2201      	movs	r2, #1
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_I2C1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <MX_I2C1_Init+0x74>)
 8001384:	f000 fe94 	bl	80020b0 <HAL_I2C_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138e:	f000 f8b1 	bl	80014f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <MX_I2C1_Init+0x74>)
 8001396:	f001 fd09 	bl	8002dac <HAL_I2CEx_ConfigAnalogFilter>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a0:	f000 f8a8 	bl	80014f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_I2C1_Init+0x74>)
 80013a8:	f001 fd4b 	bl	8002e42 <HAL_I2CEx_ConfigDigitalFilter>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f89f 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000008c 	.word	0x2000008c
 80013c0:	40005400 	.word	0x40005400
 80013c4:	10909cec 	.word	0x10909cec

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_USART2_UART_Init+0x5c>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART2_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART2_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART2_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART2_UART_Init+0x58>)
 800140c:	f003 f886 	bl	800451c <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001416:	f000 f86d 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000e0 	.word	0x200000e0
 8001424:	40004400 	.word	0x40004400

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_GPIO_Init+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a24      	ldr	r2, [pc, #144]	; (80014ec <MX_GPIO_Init+0xc4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_GPIO_Init+0xc4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <MX_GPIO_Init+0xc4>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_GPIO_Init+0xc4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2120      	movs	r1, #32
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f000 fdeb 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_GPIO_Init+0xc8>)
 80014c2:	f000 fb3f 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c6:	2320      	movs	r3, #32
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e0:	f000 fb30 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fc:	e7fe      	b.n	80014fc <Error_Handler+0x8>
	...

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x44>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6613      	str	r3, [r2, #96]	; 0x60
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x44>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x44>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x44>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ac      	sub	sp, #176	; 0xb0
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2288      	movs	r2, #136	; 0x88
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fd9d 	bl	80050a8 <memset>
  if(hi2c->Instance==I2C1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_I2C_MspInit+0xb0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d13a      	bne.n	80015ee <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fb0d 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff ffb0 	bl	80014f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b2:	2312      	movs	r3, #18
 80015b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ce:	4619      	mov	r1, r3
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <HAL_I2C_MspInit+0xb8>)
 80015d2:	f000 fab7 	bl	8001b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_I2C_MspInit+0xb4>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	37b0      	adds	r7, #176	; 0xb0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_I2C_MspDeInit+0x38>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10d      	bne.n	8001632 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_I2C_MspDeInit+0x3c>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_I2C_MspDeInit+0x3c>)
 800161c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001620:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <HAL_I2C_MspDeInit+0x40>)
 8001626:	f000 fc37 	bl	8001e98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_I2C_MspDeInit+0x40>)
 800162e:	f000 fc33 	bl	8001e98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ac      	sub	sp, #176	; 0xb0
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2288      	movs	r2, #136	; 0x88
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fd1d 	bl	80050a8 <memset>
  if(huart->Instance==USART2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_UART_MspInit+0xb0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d13b      	bne.n	80016f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001678:	2302      	movs	r3, #2
 800167a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fa8d 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff ff30 	bl	80014f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_UART_MspInit+0xb4>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_UART_MspInit+0xb4>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_UART_MspInit+0xb4>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_UART_MspInit+0xb4>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <HAL_UART_MspInit+0xb4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_UART_MspInit+0xb4>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c4:	230c      	movs	r3, #12
 80016c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016dc:	2307      	movs	r3, #7
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f000 fa2a 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	37b0      	adds	r7, #176	; 0xb0
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40021000 	.word	0x40021000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f8d0 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 fc98 	bl	80050b8 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20018000 	.word	0x20018000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000168 	.word	0x20000168
 80017bc:	200002b8 	.word	0x200002b8

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fc57 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fbfb 	bl	8001010 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001828:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 800182c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001830:	200002b8 	.word	0x200002b8

08001834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_2_IRQHandler>
	...

08001838 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_Init+0x3c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x3c>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 f944 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001854:	2000      	movs	r0, #0
 8001856:	f000 f80f 	bl	8001878 <HAL_InitTick>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	e001      	b.n	800186a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001866:	f7ff fe4b 	bl	8001500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_InitTick+0x70>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_InitTick+0x6c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f941 	bl	8001b2a <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d809      	bhi.n	80018c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f919 	bl	8001af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_InitTick+0x74>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e007      	b.n	80018d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e004      	b.n	80018d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e001      	b.n	80018d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	2000016c 	.word	0x2000016c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000016c 	.word	0x2000016c

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5c 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b52:	e17f      	b.n	8001e54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8171 	beq.w	8001e4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x40>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d118      	bne.n	8001c24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	f003 0201 	and.w	r2, r3, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d017      	beq.n	8001c60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d123      	bne.n	8001cb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	6939      	ldr	r1, [r7, #16]
 8001cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80ac 	beq.w	8001e4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6613      	str	r3, [r2, #96]	; 0x60
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d0e:	4a5a      	ldr	r2, [pc, #360]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x242>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_GPIO_Init+0x338>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	; (8001e80 <HAL_GPIO_Init+0x33c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	; (8001e84 <HAL_GPIO_Init+0x340>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <HAL_GPIO_Init+0x344>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x232>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_GPIO_Init+0x348>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_GPIO_Init+0x34c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x22a>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x244>
 8001d86:	2300      	movs	r3, #0
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d98:	4937      	ldr	r1, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dca:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_GPIO_Init+0x350>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f47f ae78 	bne.w	8001b54 <HAL_GPIO_Init+0x10>
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	48000800 	.word	0x48000800
 8001e84:	48000c00 	.word	0x48000c00
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48001400 	.word	0x48001400
 8001e90:	48001800 	.word	0x48001800
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ea6:	e0cd      	b.n	8002044 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80c0 	beq.w	800203e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001ebe:	4a68      	ldr	r2, [pc, #416]	; (8002060 <HAL_GPIO_DeInit+0x1c8>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ee6:	d025      	beq.n	8001f34 <HAL_GPIO_DeInit+0x9c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a5e      	ldr	r2, [pc, #376]	; (8002064 <HAL_GPIO_DeInit+0x1cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01f      	beq.n	8001f30 <HAL_GPIO_DeInit+0x98>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_GPIO_DeInit+0x1d0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d019      	beq.n	8001f2c <HAL_GPIO_DeInit+0x94>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_GPIO_DeInit+0x1d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_GPIO_DeInit+0x90>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_GPIO_DeInit+0x1d8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_DeInit+0x8c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_GPIO_DeInit+0x1dc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_DeInit+0x88>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a59      	ldr	r2, [pc, #356]	; (8002078 <HAL_GPIO_DeInit+0x1e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_DeInit+0x84>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e00c      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	e00a      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f20:	2305      	movs	r3, #5
 8001f22:	e008      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e004      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_GPIO_DeInit+0x9e>
 8001f34:	2300      	movs	r3, #0
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	f002 0203 	and.w	r2, r2, #3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d132      	bne.n	8001fac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	494b      	ldr	r1, [pc, #300]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001f54:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4947      	ldr	r1, [pc, #284]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4944      	ldr	r1, [pc, #272]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001f70:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	4940      	ldr	r1, [pc, #256]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_GPIO_DeInit+0x1c8>)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	4830      	ldr	r0, [pc, #192]	; (8002060 <HAL_GPIO_DeInit+0x1c8>)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	08d2      	lsrs	r2, r2, #3
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	2101      	movs	r1, #1
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2103      	movs	r1, #3
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202e:	2101      	movs	r1, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f af2b 	bne.w	8001ea8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40010000 	.word	0x40010000
 8002064:	48000400 	.word	0x48000400
 8002068:	48000800 	.word	0x48000800
 800206c:	48000c00 	.word	0x48000c00
 8002070:	48001000 	.word	0x48001000
 8002074:	48001400 	.word	0x48001400
 8002078:	48001800 	.word	0x48001800
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08d      	b.n	80021de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fa36 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e006      	b.n	8002138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d108      	bne.n	8002152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e021      	b.n	800223c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff f9f7 	bl	8001604 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	461a      	mov	r2, r3
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
 8002254:	4613      	mov	r3, r2
 8002256:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b20      	cmp	r3, #32
 8002262:	f040 80fd 	bne.w	8002460 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2C_Master_Transmit+0x30>
 8002270:	2302      	movs	r3, #2
 8002272:	e0f6      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800227c:	f7ff fb4c 	bl	8001918 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2319      	movs	r3, #25
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fb1f 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0e1      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	; 0x21
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2210      	movs	r2, #16
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	893a      	ldrh	r2, [r7, #8]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2bff      	cmp	r3, #255	; 0xff
 80022ce:	d906      	bls.n	80022de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80022d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e007      	b.n	80022ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	4b4e      	ldr	r3, [pc, #312]	; (800246c <HAL_I2C_Master_Transmit+0x228>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fd05 	bl	8002d48 <I2C_TransferConfig>
 800233e:	e066      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_I2C_Master_Transmit+0x228>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fcfa 	bl	8002d48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002354:	e05b      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	6a39      	ldr	r1, [r7, #32]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fb08 	bl	8002970 <I2C_WaitOnTXISFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07b      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d034      	beq.n	800240e <HAL_I2C_Master_Transmit+0x1ca>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d130      	bne.n	800240e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fa8b 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e04d      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2bff      	cmp	r3, #255	; 0xff
 80023ce:	d90e      	bls.n	80023ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fcae 	bl	8002d48 <I2C_TransferConfig>
 80023ec:	e00f      	b.n	800240e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	8979      	ldrh	r1, [r7, #10]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fc9d 	bl	8002d48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d19e      	bne.n	8002356 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 faee 	bl	80029fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e01a      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2220      	movs	r2, #32
 8002432:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_I2C_Master_Transmit+0x22c>)
 8002440:	400b      	ands	r3, r1
 8002442:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	80002000 	.word	0x80002000
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	460b      	mov	r3, r1
 8002482:	817b      	strh	r3, [r7, #10]
 8002484:	4613      	mov	r3, r2
 8002486:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 80db 	bne.w	800264c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_I2C_Master_Receive+0x30>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0d4      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ac:	f7ff fa34 	bl	8001918 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2319      	movs	r3, #25
 80024b8:	2201      	movs	r2, #1
 80024ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa07 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0bf      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2222      	movs	r2, #34	; 0x22
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2210      	movs	r2, #16
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2bff      	cmp	r3, #255	; 0xff
 80024fe:	d90e      	bls.n	800251e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	b2da      	uxtb	r2, r3
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <HAL_I2C_Master_Receive+0x1e4>)
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fc16 	bl	8002d48 <I2C_TransferConfig>
 800251c:	e06d      	b.n	80025fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_I2C_Master_Receive+0x1e4>)
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fc05 	bl	8002d48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800253e:	e05c      	b.n	80025fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6a39      	ldr	r1, [r7, #32]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa9d 	bl	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e07c      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d034      	beq.n	80025fa <HAL_I2C_Master_Receive+0x186>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d130      	bne.n	80025fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2200      	movs	r2, #0
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f995 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e04d      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2bff      	cmp	r3, #255	; 0xff
 80025ba:	d90e      	bls.n	80025da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fbb8 	bl	8002d48 <I2C_TransferConfig>
 80025d8:	e00f      	b.n	80025fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fba7 	bl	8002d48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d19d      	bne.n	8002540 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6a39      	ldr	r1, [r7, #32]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f9f8 	bl	80029fe <I2C_WaitOnSTOPFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e01a      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2220      	movs	r2, #32
 800261e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_I2C_Master_Receive+0x1e8>)
 800262c:	400b      	ands	r3, r1
 800262e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	80002400 	.word	0x80002400
 800265c:	fe00e800 	.word	0xfe00e800

08002660 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b20      	cmp	r3, #32
 800267e:	f040 80f3 	bne.w	8002868 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	d101      	bne.n	8002696 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	e0e9      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_I2C_IsDeviceReady+0x44>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e0e2      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_IsDeviceReady+0x72>
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d0:	e006      	b.n	80026e0 <HAL_I2C_IsDeviceReady+0x80>
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff f917 	bl	8001918 <HAL_GetTick>
 80026ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b10      	cmp	r3, #16
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002718:	e034      	b.n	8002784 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d01a      	beq.n	8002758 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7ff f8f9 	bl	8001918 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <HAL_I2C_IsDeviceReady+0xd8>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10f      	bne.n	8002758 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e088      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b10      	cmp	r3, #16
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_I2C_IsDeviceReady+0x130>
 800278a:	7fbb      	ldrb	r3, [r7, #30]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0c4      	beq.n	800271a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b10      	cmp	r3, #16
 800279c:	d01a      	beq.n	80027d4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2120      	movs	r1, #32
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f892 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e058      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e04a      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	2120      	movs	r1, #32
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f877 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e03d      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d118      	bne.n	8002838 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002814:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	2120      	movs	r1, #32
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f856 	bl	80028d2 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e01c      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2220      	movs	r2, #32
 8002836:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	f63f af39 	bhi.w	80026ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b02      	cmp	r3, #2
 800289e:	d103      	bne.n	80028a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d007      	beq.n	80028c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	619a      	str	r2, [r3, #24]
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e2:	e031      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d02d      	beq.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ec:	f7ff f814 	bl	8001918 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d302      	bcc.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d122      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	429a      	cmp	r2, r3
 800291e:	d113      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00f      	b.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	429a      	cmp	r2, r3
 8002964:	d0be      	beq.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297c:	e033      	b.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f900 	bl	8002b88 <I2C_IsErrorOccurred>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e031      	b.n	80029f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d025      	beq.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe ffbd 	bl	8001918 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11a      	bne.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d013      	beq.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e007      	b.n	80029f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d1c4      	bne.n	800297e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0a:	e02f      	b.n	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8b9 	bl	8002b88 <I2C_IsErrorOccurred>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e02d      	b.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe ff7a 	bl	8001918 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11a      	bne.n	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d013      	beq.n	8002a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d1c8      	bne.n	8002a0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a90:	e06b      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f876 	bl	8002b88 <I2C_IsErrorOccurred>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e069      	b.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d138      	bne.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d105      	bne.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e055      	b.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d107      	bne.n	8002aec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aea:	e002      	b.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2220      	movs	r2, #32
 8002af8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b06:	400b      	ands	r3, r1
 8002b08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e029      	b.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fef7 	bl	8001918 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00f      	beq.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d18c      	bne.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	fe00e800 	.word	0xfe00e800

08002b88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d068      	beq.n	8002c86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bbc:	e049      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d045      	beq.n	8002c52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe fea7 	bl	8001918 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_IsErrorOccurred+0x54>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d13a      	bne.n	8002c52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	d121      	bne.n	8002c44 <I2C_IsErrorOccurred+0xbc>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c06:	d01d      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d01a      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c1e:	f7fe fe7b 	bl	8001918 <HAL_GetTick>
 8002c22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e00e      	b.n	8002c44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c26:	f7fe fe77 	bl	8001918 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b19      	cmp	r3, #25
 8002c32:	d907      	bls.n	8002c44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f043 0320 	orr.w	r3, r3, #32
 8002c3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c42:	e006      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d1e9      	bne.n	8002c26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d003      	beq.n	8002c68 <I2C_IsErrorOccurred+0xe0>
 8002c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0aa      	beq.n	8002bbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2220      	movs	r2, #32
 8002c76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fdc4 	bl	800288a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <I2C_IsErrorOccurred+0x1bc>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fe00e800 	.word	0xfe00e800

08002d48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	4613      	mov	r3, r2
 8002d58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d60:	7a7b      	ldrb	r3, [r7, #9]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <I2C_TransferConfig+0x60>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	ea02 0103 	and.w	r1, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	03ff63ff 	.word	0x03ff63ff

08002dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d138      	bne.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e032      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d139      	bne.n	8002ecc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e033      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40007000 	.word	0x40007000

08002ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f06:	d130      	bne.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f08:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d038      	beq.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2232      	movs	r2, #50	; 0x32
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0c9b      	lsrs	r3, r3, #18
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	e002      	b.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d102      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f2      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f64:	d110      	bne.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e00f      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d007      	beq.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f80:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e3ca      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b97      	ldr	r3, [pc, #604]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b94      	ldr	r3, [pc, #592]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80e4 	beq.w	80031a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_RCC_OscConfig+0x4a>
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	f040 808b 	bne.w	80030fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 8087 	bne.w	80030fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e3a2      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	4b82      	ldr	r3, [pc, #520]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_RCC_OscConfig+0x7c>
 8003016:	4b7f      	ldr	r3, [pc, #508]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301e:	e005      	b.n	800302c <HAL_RCC_OscConfig+0x88>
 8003020:	4b7c      	ldr	r3, [pc, #496]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	4293      	cmp	r3, r2
 800302e:	d223      	bcs.n	8003078 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd55 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e383      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003044:	4b73      	ldr	r3, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a72      	ldr	r2, [pc, #456]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b70      	ldr	r3, [pc, #448]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	496d      	ldr	r1, [pc, #436]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003062:	4b6c      	ldr	r3, [pc, #432]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	4968      	ldr	r1, [pc, #416]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
 8003076:	e025      	b.n	80030c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003078:	4b66      	ldr	r3, [pc, #408]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a65      	ldr	r2, [pc, #404]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4960      	ldr	r1, [pc, #384]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	495b      	ldr	r1, [pc, #364]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd15 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e343      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c4:	f000 fc4a 	bl	800395c <HAL_RCC_GetSysClockFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b52      	ldr	r3, [pc, #328]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4950      	ldr	r1, [pc, #320]	; (8003218 <HAL_RCC_OscConfig+0x274>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	4a4e      	ldr	r2, [pc, #312]	; (800321c <HAL_RCC_OscConfig+0x278>)
 80030e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030e4:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fbc5 	bl	8001878 <HAL_InitTick>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d052      	beq.n	800319e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	e327      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d032      	beq.n	800316a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003104:	4b43      	ldr	r3, [pc, #268]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a42      	ldr	r2, [pc, #264]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003110:	f7fe fc02 	bl	8001918 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003118:	f7fe fbfe 	bl	8001918 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e310      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800312a:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a36      	ldr	r2, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4931      	ldr	r1, [pc, #196]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	492c      	ldr	r1, [pc, #176]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	e01a      	b.n	80031a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800316a:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003176:	f7fe fbcf 	bl	8001918 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317e:	f7fe fbcb 	bl	8001918 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e2dd      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x1da>
 800319c:	e000      	b.n	80031a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d074      	beq.n	8003296 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x21a>
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d10e      	bne.n	80031d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d064      	beq.n	8003294 <HAL_RCC_OscConfig+0x2f0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d160      	bne.n	8003294 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e2ba      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x24a>
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e026      	b.n	800323c <HAL_RCC_OscConfig+0x298>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f6:	d115      	bne.n	8003224 <HAL_RCC_OscConfig+0x280>
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a05      	ldr	r2, [pc, #20]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a02      	ldr	r2, [pc, #8]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x298>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	080068fc 	.word	0x080068fc
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004
 8003224:	4ba0      	ldr	r3, [pc, #640]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a9f      	ldr	r2, [pc, #636]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b9d      	ldr	r3, [pc, #628]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a9c      	ldr	r2, [pc, #624]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe fb68 	bl	8001918 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe fb64 	bl	8001918 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e276      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325e:	4b92      	ldr	r3, [pc, #584]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x2a8>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fb54 	bl	8001918 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fb50 	bl	8001918 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e262      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x2d0>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d060      	beq.n	8003364 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x310>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d119      	bne.n	80032e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d116      	bne.n	80032e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b4:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_OscConfig+0x328>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e23f      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b76      	ldr	r3, [pc, #472]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	4973      	ldr	r1, [pc, #460]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e0:	e040      	b.n	8003364 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d023      	beq.n	8003332 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ea:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6e      	ldr	r2, [pc, #440]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fe fb0f 	bl	8001918 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fe fb0b 	bl	8001918 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e21d      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	495f      	ldr	r1, [pc, #380]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
 8003330:	e018      	b.n	8003364 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003332:	4b5d      	ldr	r3, [pc, #372]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5c      	ldr	r2, [pc, #368]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe faeb 	bl	8001918 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003346:	f7fe fae7 	bl	8001918 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1f9      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d03c      	beq.n	80033ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003378:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	4a4a      	ldr	r2, [pc, #296]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fac6 	bl	8001918 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe fac2 	bl	8001918 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1d4      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80033a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <HAL_RCC_OscConfig+0x3ec>
 80033b0:	e01b      	b.n	80033ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b8:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c2:	f7fe faa9 	bl	8001918 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe faa5 	bl	8001918 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1b7      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ef      	bne.n	80033ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80a6 	beq.w	8003544 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033fc:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10d      	bne.n	8003424 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_RCC_OscConfig+0x508>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d118      	bne.n	8003462 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_OscConfig+0x508>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_RCC_OscConfig+0x508>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343c:	f7fe fa6c 	bl	8001918 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fe fa68 	bl	8001918 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e17a      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_RCC_OscConfig+0x508>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <HAL_RCC_OscConfig+0x4d8>
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347a:	e029      	b.n	80034d0 <HAL_RCC_OscConfig+0x52c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b05      	cmp	r3, #5
 8003482:	d115      	bne.n	80034b0 <HAL_RCC_OscConfig+0x50c>
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_RCC_OscConfig+0x504>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a4:	e014      	b.n	80034d0 <HAL_RCC_OscConfig+0x52c>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	4b9c      	ldr	r3, [pc, #624]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a9b      	ldr	r2, [pc, #620]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c0:	4b98      	ldr	r3, [pc, #608]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a97      	ldr	r2, [pc, #604]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe fa1e 	bl	8001918 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fe fa1a 	bl	8001918 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e12a      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ed      	beq.n	80034e0 <HAL_RCC_OscConfig+0x53c>
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe fa07 	bl	8001918 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fe fa03 	bl	8001918 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e113      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003524:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ed      	bne.n	800350e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b7a      	ldr	r3, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	4a79      	ldr	r2, [pc, #484]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80fe 	beq.w	800374a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 80d0 	bne.w	80036f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003558:	4b72      	ldr	r3, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	429a      	cmp	r2, r3
 800356a:	d130      	bne.n	80035ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d127      	bne.n	80035ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d11f      	bne.n	80035ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003598:	2a07      	cmp	r2, #7
 800359a:	bf14      	ite	ne
 800359c:	2201      	movne	r2, #1
 800359e:	2200      	moveq	r2, #0
 80035a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d06e      	beq.n	80036ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d069      	beq.n	80036a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0ad      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035f0:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4b      	ldr	r2, [pc, #300]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80035f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035fc:	f7fe f98c 	bl	8001918 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe f988 	bl	8001918 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e09a      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003622:	4b40      	ldr	r3, [pc, #256]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <HAL_RCC_OscConfig+0x784>)
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003632:	3a01      	subs	r2, #1
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800363c:	0212      	lsls	r2, r2, #8
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003644:	0852      	lsrs	r2, r2, #1
 8003646:	3a01      	subs	r2, #1
 8003648:	0552      	lsls	r2, r2, #21
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003650:	0852      	lsrs	r2, r2, #1
 8003652:	3a01      	subs	r2, #1
 8003654:	0652      	lsls	r2, r2, #25
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365c:	0912      	lsrs	r2, r2, #4
 800365e:	0452      	lsls	r2, r2, #17
 8003660:	430a      	orrs	r2, r1
 8003662:	4930      	ldr	r1, [pc, #192]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003664:	4313      	orrs	r3, r2
 8003666:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a2a      	ldr	r2, [pc, #168]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003680:	f7fe f94a 	bl	8001918 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe f946 	bl	8001918 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e058      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a6:	e050      	b.n	800374a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e04f      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d148      	bne.n	800374a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036d0:	f7fe f922 	bl	8001918 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe f91e 	bl	8001918 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e030      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x734>
 80036f6:	e028      	b.n	800374a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d023      	beq.n	8003746 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_RCC_OscConfig+0x780>)
 8003704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe f905 	bl	8001918 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003710:	e00c      	b.n	800372c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe f901 	bl	8001918 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d905      	bls.n	800372c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e013      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
 8003724:	40021000 	.word	0x40021000
 8003728:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x7b0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ec      	bne.n	8003712 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x7b0>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4905      	ldr	r1, [pc, #20]	; (8003754 <HAL_RCC_OscConfig+0x7b0>)
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_OscConfig+0x7b4>)
 8003740:	4013      	ands	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
 8003744:	e001      	b.n	800374a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	feeefffc 	.word	0xfeeefffc

0800375c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0e7      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 0207 	bic.w	r2, r3, #7
 8003786:	4970      	ldr	r1, [pc, #448]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b6e      	ldr	r3, [pc, #440]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cf      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d908      	bls.n	80037ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4960      	ldr	r1, [pc, #384]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d04c      	beq.n	8003874 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d121      	bne.n	8003832 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0a6      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fa:	4b54      	ldr	r3, [pc, #336]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d115      	bne.n	8003832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e09a      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e08e      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e086      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4943      	ldr	r1, [pc, #268]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fe f868 	bl	8001918 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fe f864 	bl	8001918 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e06e      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	429a      	cmp	r2, r3
 800388e:	d208      	bcs.n	80038a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	492b      	ldr	r1, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d210      	bcs.n	80038d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 0207 	bic.w	r2, r3, #7
 80038b8:	4923      	ldr	r1, [pc, #140]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <HAL_RCC_ClockConfig+0x1ec>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e036      	b.n	8003940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4918      	ldr	r1, [pc, #96]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4910      	ldr	r1, [pc, #64]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003910:	f000 f824 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	490b      	ldr	r1, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x1f4>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1f8>)
 800392e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1fc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd ff9f 	bl	8001878 <HAL_InitTick>
 800393a:	4603      	mov	r3, r0
 800393c:	72fb      	strb	r3, [r7, #11]

  return status;
 800393e:	7afb      	ldrb	r3, [r7, #11]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	080068fc 	.word	0x080068fc
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003974:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d121      	bne.n	80039ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d11e      	bne.n	80039ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003990:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039b8:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d102      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x110>)
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	e004      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x114>)
 80039e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d134      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0xa6>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d003      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0xac>
 8003a00:	e005      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a04:	617b      	str	r3, [r7, #20]
      break;
 8003a06:	e005      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a0a:	617b      	str	r3, [r7, #20]
      break;
 8003a0c:	e002      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	617b      	str	r3, [r7, #20]
      break;
 8003a12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	fb03 f202 	mul.w	r2, r3, r2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	0e5b      	lsrs	r3, r3, #25
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	3301      	adds	r3, #1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a54:	69bb      	ldr	r3, [r7, #24]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08006914 	.word	0x08006914
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000000 	.word	0x20000000

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a90:	f7ff fff0 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4904      	ldr	r1, [pc, #16]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	0800690c 	.word	0x0800690c

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003abc:	f7ff ffda 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	0800690c 	.word	0x0800690c

08003ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f9ee 	bl	8002edc <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
 8003b02:	e014      	b.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7ff f9de 	bl	8002edc <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d10b      	bne.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d919      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b40:	d902      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b42:	2302      	movs	r3, #2
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e013      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e010      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d902      	bls.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b54:	2303      	movs	r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e00a      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d102      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e004      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d101      	bne.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d041      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc8:	d02a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bce:	d824      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bda:	d81e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be6:	e018      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf4:	e015      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fabb 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fba6 	bl	8004360 <RCCEx_PLLSAI2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c28:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	4973      	ldr	r1, [pc, #460]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d041      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c5e:	d824      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6a:	d81e      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c76:	e018      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c84:	e015      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa73 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c96:	e00c      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fb5e 	bl	8004360 <RCCEx_PLLSAI2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	74fb      	strb	r3, [r7, #19]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb8:	4b52      	ldr	r3, [pc, #328]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	494f      	ldr	r1, [pc, #316]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a0 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d14:	2301      	movs	r3, #1
 8003d16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d24:	f7fd fdf8 	bl	8001918 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d2a:	e009      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd fdf4 	bl	8001918 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d15c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d52:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d019      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fdb3 	bl	8001918 <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db4:	e00b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd fdaf 	bl	8001918 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	74fb      	strb	r3, [r7, #19]
            break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ec      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7c7b      	ldrb	r3, [r7, #17]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a9d      	ldr	r2, [pc, #628]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b98      	ldr	r3, [pc, #608]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	4994      	ldr	r1, [pc, #592]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 020c 	bic.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	498c      	ldr	r1, [pc, #560]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e72:	4b87      	ldr	r3, [pc, #540]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4983      	ldr	r1, [pc, #524]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	497b      	ldr	r1, [pc, #492]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4972      	ldr	r1, [pc, #456]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed8:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	496a      	ldr	r1, [pc, #424]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	4961      	ldr	r1, [pc, #388]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	4959      	ldr	r1, [pc, #356]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	4950      	ldr	r1, [pc, #320]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	4948      	ldr	r1, [pc, #288]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	493f      	ldr	r1, [pc, #252]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d028      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
 8003fd0:	e011      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f8c8 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	491f      	ldr	r1, [pc, #124]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	d106      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402c:	60d3      	str	r3, [r2, #12]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f899 	bl	8004178 <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a02      	ldr	r2, [pc, #8]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	e014      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f867 	bl	8004178 <RCCEx_PLLSAI1_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	4928      	ldr	r1, [pc, #160]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e2:	d10d      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f844 	bl	8004178 <RCCEx_PLLSAI1_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d014      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	74bb      	strb	r3, [r7, #18]
 80040fe:	e011      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3320      	adds	r3, #32
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f925 	bl	8004360 <RCCEx_PLLSAI2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	490d      	ldr	r1, [pc, #52]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800416a:	7cbb      	ldrb	r3, [r7, #18]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004186:	4b75      	ldr	r3, [pc, #468]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004192:	4b72      	ldr	r3, [pc, #456]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0203 	and.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d10d      	bne.n	80041be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
       ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041aa:	4b6c      	ldr	r3, [pc, #432]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
       ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d047      	beq.n	800424e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	e044      	b.n	800424e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d018      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x86>
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d825      	bhi.n	800421c <RCCEx_PLLSAI1_Config+0xa4>
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d002      	beq.n	80041da <RCCEx_PLLSAI1_Config+0x62>
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d009      	beq.n	80041ec <RCCEx_PLLSAI1_Config+0x74>
 80041d8:	e020      	b.n	800421c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041da:	4b60      	ldr	r3, [pc, #384]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ea:	e01a      	b.n	8004222 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041ec:	4b5b      	ldr	r3, [pc, #364]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d116      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e013      	b.n	8004226 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041fe:	4b57      	ldr	r3, [pc, #348]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800420a:	4b54      	ldr	r3, [pc, #336]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800421a:	e006      	b.n	800422a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e004      	b.n	800422c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800422a:	bf00      	nop
    }

    if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	430b      	orrs	r3, r1
 8004248:	4944      	ldr	r1, [pc, #272]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d17d      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004254:	4b41      	ldr	r3, [pc, #260]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a40      	ldr	r2, [pc, #256]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800425e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004260:	f7fd fb5a 	bl	8001918 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004266:	e009      	b.n	800427c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004268:	f7fd fb56 	bl	8001918 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d902      	bls.n	800427c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	73fb      	strb	r3, [r7, #15]
        break;
 800427a:	e005      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800427c:	4b37      	ldr	r3, [pc, #220]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d160      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d111      	bne.n	80042b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	0211      	lsls	r1, r2, #8
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	0912      	lsrs	r2, r2, #4
 80042ac:	0452      	lsls	r2, r2, #17
 80042ae:	430a      	orrs	r2, r1
 80042b0:	492a      	ldr	r1, [pc, #168]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	610b      	str	r3, [r1, #16]
 80042b6:	e027      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d112      	bne.n	80042e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042be:	4b27      	ldr	r3, [pc, #156]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	0211      	lsls	r1, r2, #8
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6912      	ldr	r2, [r2, #16]
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0552      	lsls	r2, r2, #21
 80042da:	430a      	orrs	r2, r1
 80042dc:	491f      	ldr	r1, [pc, #124]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]
 80042e2:	e011      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e4:	4b1d      	ldr	r3, [pc, #116]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6892      	ldr	r2, [r2, #8]
 80042f4:	0211      	lsls	r1, r2, #8
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6952      	ldr	r2, [r2, #20]
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0652      	lsls	r2, r2, #25
 8004300:	430a      	orrs	r2, r1
 8004302:	4916      	ldr	r1, [pc, #88]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fb00 	bl	8001918 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431c:	f7fd fafc 	bl	8001918 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
          break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <RCCEx_PLLSAI1_Config+0x1e4>)
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000

08004360 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800436e:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d018      	beq.n	80043ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800437a:	4b67      	ldr	r3, [pc, #412]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0203 	and.w	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d10d      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
       ||
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004392:	4b61      	ldr	r3, [pc, #388]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
       ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d047      	beq.n	8004436 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
 80043aa:	e044      	b.n	8004436 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d018      	beq.n	80043e6 <RCCEx_PLLSAI2_Config+0x86>
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d825      	bhi.n	8004404 <RCCEx_PLLSAI2_Config+0xa4>
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d002      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0x62>
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d009      	beq.n	80043d4 <RCCEx_PLLSAI2_Config+0x74>
 80043c0:	e020      	b.n	8004404 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c2:	4b55      	ldr	r3, [pc, #340]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11d      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d2:	e01a      	b.n	800440a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e4:	e013      	b.n	800440e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043e6:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f2:	4b49      	ldr	r3, [pc, #292]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004402:	e006      	b.n	8004412 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e004      	b.n	8004414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004412:	bf00      	nop
    }

    if(status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800441a:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6819      	ldr	r1, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	3b01      	subs	r3, #1
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	430b      	orrs	r3, r1
 8004430:	4939      	ldr	r1, [pc, #228]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d167      	bne.n	800450c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800443c:	4b36      	ldr	r3, [pc, #216]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fd fa66 	bl	8001918 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800444e:	e009      	b.n	8004464 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004450:	f7fd fa62 	bl	8001918 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d902      	bls.n	8004464 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	73fb      	strb	r3, [r7, #15]
        break;
 8004462:	e005      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ef      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d14a      	bne.n	800450c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d111      	bne.n	80044a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800447c:	4b26      	ldr	r3, [pc, #152]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6892      	ldr	r2, [r2, #8]
 800448c:	0211      	lsls	r1, r2, #8
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68d2      	ldr	r2, [r2, #12]
 8004492:	0912      	lsrs	r2, r2, #4
 8004494:	0452      	lsls	r2, r2, #17
 8004496:	430a      	orrs	r2, r1
 8004498:	491f      	ldr	r1, [pc, #124]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	614b      	str	r3, [r1, #20]
 800449e:	e011      	b.n	80044c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	0211      	lsls	r1, r2, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6912      	ldr	r2, [r2, #16]
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0652      	lsls	r2, r2, #25
 80044bc:	430a      	orrs	r2, r1
 80044be:	4916      	ldr	r1, [pc, #88]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd fa22 	bl	8001918 <HAL_GetTick>
 80044d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044d6:	e009      	b.n	80044ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d8:	f7fd fa1e 	bl	8001918 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d902      	bls.n	80044ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ea:	e005      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004508:	4313      	orrs	r3, r2
 800450a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e040      	b.n	80045b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd f882 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb6a 	bl	8004c3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8af 	bl	80046cc <UART_SetConfig>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01b      	b.n	80045b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fbe9 	bl	8004d80 <UART_CheckIdleState>
 80045ae:	4603      	mov	r3, r0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d178      	bne.n	80046c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Transmit+0x24>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e071      	b.n	80046c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2221      	movs	r2, #33	; 0x21
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ee:	f7fd f993 	bl	8001918 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	88fa      	ldrh	r2, [r7, #6]
 8004600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d108      	bne.n	8004620 <HAL_UART_Transmit+0x68>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e003      	b.n	8004628 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004628:	e030      	b.n	800468c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fc4b 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e03c      	b.n	80046c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465c:	b292      	uxth	r2, r2
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	3302      	adds	r3, #2
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e008      	b.n	800467a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	b292      	uxth	r2, r2
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1c8      	bne.n	800462a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2200      	movs	r2, #0
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fc14 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e005      	b.n	80046c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4ba4      	ldr	r3, [pc, #656]	; (800498c <UART_SetConfig+0x2c0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004704:	430b      	orrs	r3, r1
 8004706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a99      	ldr	r2, [pc, #612]	; (8004990 <UART_SetConfig+0x2c4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	4313      	orrs	r3, r2
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a90      	ldr	r2, [pc, #576]	; (8004994 <UART_SetConfig+0x2c8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d126      	bne.n	80047a4 <UART_SetConfig+0xd8>
 8004756:	4b90      	ldr	r3, [pc, #576]	; (8004998 <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b03      	cmp	r3, #3
 8004762:	d81b      	bhi.n	800479c <UART_SetConfig+0xd0>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0xa0>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800477d 	.word	0x0800477d
 8004770:	0800478d 	.word	0x0800478d
 8004774:	08004785 	.word	0x08004785
 8004778:	08004795 	.word	0x08004795
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e116      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e112      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e10e      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e10a      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e106      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7c      	ldr	r2, [pc, #496]	; (800499c <UART_SetConfig+0x2d0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d138      	bne.n	8004820 <UART_SetConfig+0x154>
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <UART_SetConfig+0x2cc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d82d      	bhi.n	8004818 <UART_SetConfig+0x14c>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0xf8>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	08004819 	.word	0x08004819
 80047cc:	08004819 	.word	0x08004819
 80047d0:	08004819 	.word	0x08004819
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
 80047e4:	08004801 	.word	0x08004801
 80047e8:	08004819 	.word	0x08004819
 80047ec:	08004819 	.word	0x08004819
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004811 	.word	0x08004811
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e0d8      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004800:	2302      	movs	r3, #2
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e0d4      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e0d0      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e0cc      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e0c8      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5e      	ldr	r2, [pc, #376]	; (80049a0 <UART_SetConfig+0x2d4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d125      	bne.n	8004876 <UART_SetConfig+0x1aa>
 800482a:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <UART_SetConfig+0x2cc>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d016      	beq.n	8004866 <UART_SetConfig+0x19a>
 8004838:	2b30      	cmp	r3, #48	; 0x30
 800483a:	d818      	bhi.n	800486e <UART_SetConfig+0x1a2>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d00a      	beq.n	8004856 <UART_SetConfig+0x18a>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d814      	bhi.n	800486e <UART_SetConfig+0x1a2>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <UART_SetConfig+0x182>
 8004848:	2b10      	cmp	r3, #16
 800484a:	d008      	beq.n	800485e <UART_SetConfig+0x192>
 800484c:	e00f      	b.n	800486e <UART_SetConfig+0x1a2>
 800484e:	2300      	movs	r3, #0
 8004850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004854:	e0ad      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004856:	2302      	movs	r3, #2
 8004858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485c:	e0a9      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800485e:	2304      	movs	r3, #4
 8004860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004864:	e0a5      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004866:	2308      	movs	r3, #8
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486c:	e0a1      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800486e:	2310      	movs	r3, #16
 8004870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004874:	e09d      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4a      	ldr	r2, [pc, #296]	; (80049a4 <UART_SetConfig+0x2d8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d125      	bne.n	80048cc <UART_SetConfig+0x200>
 8004880:	4b45      	ldr	r3, [pc, #276]	; (8004998 <UART_SetConfig+0x2cc>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488a:	2bc0      	cmp	r3, #192	; 0xc0
 800488c:	d016      	beq.n	80048bc <UART_SetConfig+0x1f0>
 800488e:	2bc0      	cmp	r3, #192	; 0xc0
 8004890:	d818      	bhi.n	80048c4 <UART_SetConfig+0x1f8>
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d00a      	beq.n	80048ac <UART_SetConfig+0x1e0>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d814      	bhi.n	80048c4 <UART_SetConfig+0x1f8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <UART_SetConfig+0x1d8>
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d008      	beq.n	80048b4 <UART_SetConfig+0x1e8>
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x1f8>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e082      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80048ac:	2302      	movs	r3, #2
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e07e      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e07a      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e076      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e072      	b.n	80049b2 <UART_SetConfig+0x2e6>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <UART_SetConfig+0x2dc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d12a      	bne.n	800492c <UART_SetConfig+0x260>
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <UART_SetConfig+0x2cc>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e4:	d01a      	beq.n	800491c <UART_SetConfig+0x250>
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ea:	d81b      	bhi.n	8004924 <UART_SetConfig+0x258>
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d00c      	beq.n	800490c <UART_SetConfig+0x240>
 80048f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f6:	d815      	bhi.n	8004924 <UART_SetConfig+0x258>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <UART_SetConfig+0x238>
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d008      	beq.n	8004914 <UART_SetConfig+0x248>
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x258>
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e052      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800490c:	2302      	movs	r3, #2
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e04e      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e04a      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e046      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492a:	e042      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a17      	ldr	r2, [pc, #92]	; (8004990 <UART_SetConfig+0x2c4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d13a      	bne.n	80049ac <UART_SetConfig+0x2e0>
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <UART_SetConfig+0x2cc>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004944:	d01a      	beq.n	800497c <UART_SetConfig+0x2b0>
 8004946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800494a:	d81b      	bhi.n	8004984 <UART_SetConfig+0x2b8>
 800494c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004950:	d00c      	beq.n	800496c <UART_SetConfig+0x2a0>
 8004952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004956:	d815      	bhi.n	8004984 <UART_SetConfig+0x2b8>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <UART_SetConfig+0x298>
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d008      	beq.n	8004974 <UART_SetConfig+0x2a8>
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x2b8>
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e022      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e01e      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e01a      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e016      	b.n	80049b2 <UART_SetConfig+0x2e6>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e012      	b.n	80049b2 <UART_SetConfig+0x2e6>
 800498c:	efff69f3 	.word	0xefff69f3
 8004990:	40008000 	.word	0x40008000
 8004994:	40013800 	.word	0x40013800
 8004998:	40021000 	.word	0x40021000
 800499c:	40004400 	.word	0x40004400
 80049a0:	40004800 	.word	0x40004800
 80049a4:	40004c00 	.word	0x40004c00
 80049a8:	40005000 	.word	0x40005000
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a9f      	ldr	r2, [pc, #636]	; (8004c34 <UART_SetConfig+0x568>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d17a      	bne.n	8004ab2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d824      	bhi.n	8004a0e <UART_SetConfig+0x342>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x300>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	080049ff 	.word	0x080049ff
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a0f 	.word	0x08004a0f
 80049ec:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7ff f84c 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 80049f4:	61f8      	str	r0, [r7, #28]
        break;
 80049f6:	e010      	b.n	8004a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <UART_SetConfig+0x56c>)
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e00d      	b.n	8004a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fe ffad 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8004a02:	61f8      	str	r0, [r7, #28]
        break;
 8004a04:	e009      	b.n	8004a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e005      	b.n	8004a1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80fb 	beq.w	8004c18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d305      	bcc.n	8004a3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d903      	bls.n	8004a46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a44:	e0e8      	b.n	8004c18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	4615      	mov	r5, r2
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	022b      	lsls	r3, r5, #8
 8004a58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a5c:	0222      	lsls	r2, r4, #8
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	6849      	ldr	r1, [r1, #4]
 8004a62:	0849      	lsrs	r1, r1, #1
 8004a64:	2000      	movs	r0, #0
 8004a66:	4688      	mov	r8, r1
 8004a68:	4681      	mov	r9, r0
 8004a6a:	eb12 0a08 	adds.w	sl, r2, r8
 8004a6e:	eb43 0b09 	adc.w	fp, r3, r9
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a80:	4650      	mov	r0, sl
 8004a82:	4659      	mov	r1, fp
 8004a84:	f7fc f8b8 	bl	8000bf8 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a96:	d308      	bcc.n	8004aaa <UART_SetConfig+0x3de>
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d204      	bcs.n	8004aaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	e0b6      	b.n	8004c18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ab0:	e0b2      	b.n	8004c18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d15e      	bne.n	8004b7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d828      	bhi.n	8004b16 <UART_SetConfig+0x44a>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x400>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004b01 	.word	0x08004b01
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004b17 	.word	0x08004b17
 8004ae8:	08004b17 	.word	0x08004b17
 8004aec:	08004b0f 	.word	0x08004b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe ffcc 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
        break;
 8004af6:	e014      	b.n	8004b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7fe ffde 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004afc:	61f8      	str	r0, [r7, #28]
        break;
 8004afe:	e010      	b.n	8004b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b00:	4b4d      	ldr	r3, [pc, #308]	; (8004c38 <UART_SetConfig+0x56c>)
 8004b02:	61fb      	str	r3, [r7, #28]
        break;
 8004b04:	e00d      	b.n	8004b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b06:	f7fe ff29 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8004b0a:	61f8      	str	r0, [r7, #28]
        break;
 8004b0c:	e009      	b.n	8004b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	61fb      	str	r3, [r7, #28]
        break;
 8004b14:	e005      	b.n	8004b22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d077      	beq.n	8004c18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005a      	lsls	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	441a      	add	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d916      	bls.n	8004b72 <UART_SetConfig+0x4a6>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4a:	d212      	bcs.n	8004b72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f023 030f 	bic.w	r3, r3, #15
 8004b54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	8afa      	ldrh	r2, [r7, #22]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e052      	b.n	8004c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b78:	e04e      	b.n	8004c18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d827      	bhi.n	8004bd2 <UART_SetConfig+0x506>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0x4bc>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bd3 	.word	0x08004bd3
 8004b98:	08004bc3 	.word	0x08004bc3
 8004b9c:	08004bd3 	.word	0x08004bd3
 8004ba0:	08004bd3 	.word	0x08004bd3
 8004ba4:	08004bd3 	.word	0x08004bd3
 8004ba8:	08004bcb 	.word	0x08004bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bac:	f7fe ff6e 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8004bb0:	61f8      	str	r0, [r7, #28]
        break;
 8004bb2:	e014      	b.n	8004bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb4:	f7fe ff80 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004bb8:	61f8      	str	r0, [r7, #28]
        break;
 8004bba:	e010      	b.n	8004bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <UART_SetConfig+0x56c>)
 8004bbe:	61fb      	str	r3, [r7, #28]
        break;
 8004bc0:	e00d      	b.n	8004bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7fe fecb 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8004bc6:	61f8      	str	r0, [r7, #28]
        break;
 8004bc8:	e009      	b.n	8004bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bce:	61fb      	str	r3, [r7, #28]
        break;
 8004bd0:	e005      	b.n	8004bde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	085a      	lsrs	r2, r3, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d909      	bls.n	8004c12 <UART_SetConfig+0x546>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d205      	bcs.n	8004c12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e002      	b.n	8004c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c32:	bf00      	nop
 8004c34:	40008000 	.word	0x40008000
 8004c38:	00f42400 	.word	0x00f42400

08004c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d10a      	bne.n	8004d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b098      	sub	sp, #96	; 0x60
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fc fdc2 	bl	8001918 <HAL_GetTick>
 8004d94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d12e      	bne.n	8004e02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f88c 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d021      	beq.n	8004e02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e6      	bne.n	8004dbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e062      	b.n	8004ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d149      	bne.n	8004ea4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f856 	bl	8004ed0 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03c      	beq.n	8004ea4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	623b      	str	r3, [r7, #32]
   return(result);
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	633b      	str	r3, [r7, #48]	; 0x30
 8004e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e7c:	61fa      	str	r2, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e011      	b.n	8004ec8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3758      	adds	r7, #88	; 0x58
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee0:	e049      	b.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d045      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fc fd15 	bl	8001918 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e048      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d031      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d110      	bne.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2208      	movs	r2, #8
 8004f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f838 	bl	8004f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2208      	movs	r2, #8
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e029      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f50:	d111      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f81e 	bl	8004f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e00f      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d0a6      	beq.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b095      	sub	sp, #84	; 0x54
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	2b01      	cmp	r3, #1
 8005012:	d118      	bne.n	8005046 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	60bb      	str	r3, [r7, #8]
   return(result);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6979      	ldr	r1, [r7, #20]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	613b      	str	r3, [r7, #16]
   return(result);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	669a      	str	r2, [r3, #104]	; 0x68
}
 800505a:	bf00      	nop
 800505c:	3754      	adds	r7, #84	; 0x54
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <siprintf>:
 8005068:	b40e      	push	{r1, r2, r3}
 800506a:	b500      	push	{lr}
 800506c:	b09c      	sub	sp, #112	; 0x70
 800506e:	ab1d      	add	r3, sp, #116	; 0x74
 8005070:	9002      	str	r0, [sp, #8]
 8005072:	9006      	str	r0, [sp, #24]
 8005074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005078:	4809      	ldr	r0, [pc, #36]	; (80050a0 <siprintf+0x38>)
 800507a:	9107      	str	r1, [sp, #28]
 800507c:	9104      	str	r1, [sp, #16]
 800507e:	4909      	ldr	r1, [pc, #36]	; (80050a4 <siprintf+0x3c>)
 8005080:	f853 2b04 	ldr.w	r2, [r3], #4
 8005084:	9105      	str	r1, [sp, #20]
 8005086:	6800      	ldr	r0, [r0, #0]
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	a902      	add	r1, sp, #8
 800508c:	f000 f992 	bl	80053b4 <_svfiprintf_r>
 8005090:	9b02      	ldr	r3, [sp, #8]
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	b01c      	add	sp, #112	; 0x70
 8005098:	f85d eb04 	ldr.w	lr, [sp], #4
 800509c:	b003      	add	sp, #12
 800509e:	4770      	bx	lr
 80050a0:	20000058 	.word	0x20000058
 80050a4:	ffff0208 	.word	0xffff0208

080050a8 <memset>:
 80050a8:	4402      	add	r2, r0
 80050aa:	4603      	mov	r3, r0
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	f803 1b01 	strb.w	r1, [r3], #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000058 	.word	0x20000058

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	; (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	; (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <__libc_init_array+0x44>)
 80050d8:	f001 fba2 	bl	8006820 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	080069b0 	.word	0x080069b0
 8005100:	080069b0 	.word	0x080069b0
 8005104:	080069b0 	.word	0x080069b0
 8005108:	080069b4 	.word	0x080069b4

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <_free_r>:
 8005110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005112:	2900      	cmp	r1, #0
 8005114:	d044      	beq.n	80051a0 <_free_r+0x90>
 8005116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511a:	9001      	str	r0, [sp, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f1a1 0404 	sub.w	r4, r1, #4
 8005122:	bfb8      	it	lt
 8005124:	18e4      	addlt	r4, r4, r3
 8005126:	f000 f8df 	bl	80052e8 <__malloc_lock>
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <_free_r+0x94>)
 800512c:	9801      	ldr	r0, [sp, #4]
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	b933      	cbnz	r3, 8005140 <_free_r+0x30>
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	6014      	str	r4, [r2, #0]
 8005136:	b003      	add	sp, #12
 8005138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800513c:	f000 b8da 	b.w	80052f4 <__malloc_unlock>
 8005140:	42a3      	cmp	r3, r4
 8005142:	d908      	bls.n	8005156 <_free_r+0x46>
 8005144:	6825      	ldr	r5, [r4, #0]
 8005146:	1961      	adds	r1, r4, r5
 8005148:	428b      	cmp	r3, r1
 800514a:	bf01      	itttt	eq
 800514c:	6819      	ldreq	r1, [r3, #0]
 800514e:	685b      	ldreq	r3, [r3, #4]
 8005150:	1949      	addeq	r1, r1, r5
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	e7ed      	b.n	8005132 <_free_r+0x22>
 8005156:	461a      	mov	r2, r3
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	b10b      	cbz	r3, 8005160 <_free_r+0x50>
 800515c:	42a3      	cmp	r3, r4
 800515e:	d9fa      	bls.n	8005156 <_free_r+0x46>
 8005160:	6811      	ldr	r1, [r2, #0]
 8005162:	1855      	adds	r5, r2, r1
 8005164:	42a5      	cmp	r5, r4
 8005166:	d10b      	bne.n	8005180 <_free_r+0x70>
 8005168:	6824      	ldr	r4, [r4, #0]
 800516a:	4421      	add	r1, r4
 800516c:	1854      	adds	r4, r2, r1
 800516e:	42a3      	cmp	r3, r4
 8005170:	6011      	str	r1, [r2, #0]
 8005172:	d1e0      	bne.n	8005136 <_free_r+0x26>
 8005174:	681c      	ldr	r4, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	6053      	str	r3, [r2, #4]
 800517a:	440c      	add	r4, r1
 800517c:	6014      	str	r4, [r2, #0]
 800517e:	e7da      	b.n	8005136 <_free_r+0x26>
 8005180:	d902      	bls.n	8005188 <_free_r+0x78>
 8005182:	230c      	movs	r3, #12
 8005184:	6003      	str	r3, [r0, #0]
 8005186:	e7d6      	b.n	8005136 <_free_r+0x26>
 8005188:	6825      	ldr	r5, [r4, #0]
 800518a:	1961      	adds	r1, r4, r5
 800518c:	428b      	cmp	r3, r1
 800518e:	bf04      	itt	eq
 8005190:	6819      	ldreq	r1, [r3, #0]
 8005192:	685b      	ldreq	r3, [r3, #4]
 8005194:	6063      	str	r3, [r4, #4]
 8005196:	bf04      	itt	eq
 8005198:	1949      	addeq	r1, r1, r5
 800519a:	6021      	streq	r1, [r4, #0]
 800519c:	6054      	str	r4, [r2, #4]
 800519e:	e7ca      	b.n	8005136 <_free_r+0x26>
 80051a0:	b003      	add	sp, #12
 80051a2:	bd30      	pop	{r4, r5, pc}
 80051a4:	200002b0 	.word	0x200002b0

080051a8 <sbrk_aligned>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4e0e      	ldr	r6, [pc, #56]	; (80051e4 <sbrk_aligned+0x3c>)
 80051ac:	460c      	mov	r4, r1
 80051ae:	6831      	ldr	r1, [r6, #0]
 80051b0:	4605      	mov	r5, r0
 80051b2:	b911      	cbnz	r1, 80051ba <sbrk_aligned+0x12>
 80051b4:	f000 fba6 	bl	8005904 <_sbrk_r>
 80051b8:	6030      	str	r0, [r6, #0]
 80051ba:	4621      	mov	r1, r4
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 fba1 	bl	8005904 <_sbrk_r>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	d00a      	beq.n	80051dc <sbrk_aligned+0x34>
 80051c6:	1cc4      	adds	r4, r0, #3
 80051c8:	f024 0403 	bic.w	r4, r4, #3
 80051cc:	42a0      	cmp	r0, r4
 80051ce:	d007      	beq.n	80051e0 <sbrk_aligned+0x38>
 80051d0:	1a21      	subs	r1, r4, r0
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 fb96 	bl	8005904 <_sbrk_r>
 80051d8:	3001      	adds	r0, #1
 80051da:	d101      	bne.n	80051e0 <sbrk_aligned+0x38>
 80051dc:	f04f 34ff 	mov.w	r4, #4294967295
 80051e0:	4620      	mov	r0, r4
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	200002b4 	.word	0x200002b4

080051e8 <_malloc_r>:
 80051e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ec:	1ccd      	adds	r5, r1, #3
 80051ee:	f025 0503 	bic.w	r5, r5, #3
 80051f2:	3508      	adds	r5, #8
 80051f4:	2d0c      	cmp	r5, #12
 80051f6:	bf38      	it	cc
 80051f8:	250c      	movcc	r5, #12
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	4607      	mov	r7, r0
 80051fe:	db01      	blt.n	8005204 <_malloc_r+0x1c>
 8005200:	42a9      	cmp	r1, r5
 8005202:	d905      	bls.n	8005210 <_malloc_r+0x28>
 8005204:	230c      	movs	r3, #12
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	2600      	movs	r6, #0
 800520a:	4630      	mov	r0, r6
 800520c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005210:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052e4 <_malloc_r+0xfc>
 8005214:	f000 f868 	bl	80052e8 <__malloc_lock>
 8005218:	f8d8 3000 	ldr.w	r3, [r8]
 800521c:	461c      	mov	r4, r3
 800521e:	bb5c      	cbnz	r4, 8005278 <_malloc_r+0x90>
 8005220:	4629      	mov	r1, r5
 8005222:	4638      	mov	r0, r7
 8005224:	f7ff ffc0 	bl	80051a8 <sbrk_aligned>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	4604      	mov	r4, r0
 800522c:	d155      	bne.n	80052da <_malloc_r+0xf2>
 800522e:	f8d8 4000 	ldr.w	r4, [r8]
 8005232:	4626      	mov	r6, r4
 8005234:	2e00      	cmp	r6, #0
 8005236:	d145      	bne.n	80052c4 <_malloc_r+0xdc>
 8005238:	2c00      	cmp	r4, #0
 800523a:	d048      	beq.n	80052ce <_malloc_r+0xe6>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	4631      	mov	r1, r6
 8005240:	4638      	mov	r0, r7
 8005242:	eb04 0903 	add.w	r9, r4, r3
 8005246:	f000 fb5d 	bl	8005904 <_sbrk_r>
 800524a:	4581      	cmp	r9, r0
 800524c:	d13f      	bne.n	80052ce <_malloc_r+0xe6>
 800524e:	6821      	ldr	r1, [r4, #0]
 8005250:	1a6d      	subs	r5, r5, r1
 8005252:	4629      	mov	r1, r5
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff ffa7 	bl	80051a8 <sbrk_aligned>
 800525a:	3001      	adds	r0, #1
 800525c:	d037      	beq.n	80052ce <_malloc_r+0xe6>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	442b      	add	r3, r5
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	f8d8 3000 	ldr.w	r3, [r8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d038      	beq.n	80052de <_malloc_r+0xf6>
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	42a2      	cmp	r2, r4
 8005270:	d12b      	bne.n	80052ca <_malloc_r+0xe2>
 8005272:	2200      	movs	r2, #0
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	e00f      	b.n	8005298 <_malloc_r+0xb0>
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	1b52      	subs	r2, r2, r5
 800527c:	d41f      	bmi.n	80052be <_malloc_r+0xd6>
 800527e:	2a0b      	cmp	r2, #11
 8005280:	d917      	bls.n	80052b2 <_malloc_r+0xca>
 8005282:	1961      	adds	r1, r4, r5
 8005284:	42a3      	cmp	r3, r4
 8005286:	6025      	str	r5, [r4, #0]
 8005288:	bf18      	it	ne
 800528a:	6059      	strne	r1, [r3, #4]
 800528c:	6863      	ldr	r3, [r4, #4]
 800528e:	bf08      	it	eq
 8005290:	f8c8 1000 	streq.w	r1, [r8]
 8005294:	5162      	str	r2, [r4, r5]
 8005296:	604b      	str	r3, [r1, #4]
 8005298:	4638      	mov	r0, r7
 800529a:	f104 060b 	add.w	r6, r4, #11
 800529e:	f000 f829 	bl	80052f4 <__malloc_unlock>
 80052a2:	f026 0607 	bic.w	r6, r6, #7
 80052a6:	1d23      	adds	r3, r4, #4
 80052a8:	1af2      	subs	r2, r6, r3
 80052aa:	d0ae      	beq.n	800520a <_malloc_r+0x22>
 80052ac:	1b9b      	subs	r3, r3, r6
 80052ae:	50a3      	str	r3, [r4, r2]
 80052b0:	e7ab      	b.n	800520a <_malloc_r+0x22>
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	d1dd      	bne.n	8005274 <_malloc_r+0x8c>
 80052b8:	f8c8 2000 	str.w	r2, [r8]
 80052bc:	e7ec      	b.n	8005298 <_malloc_r+0xb0>
 80052be:	4623      	mov	r3, r4
 80052c0:	6864      	ldr	r4, [r4, #4]
 80052c2:	e7ac      	b.n	800521e <_malloc_r+0x36>
 80052c4:	4634      	mov	r4, r6
 80052c6:	6876      	ldr	r6, [r6, #4]
 80052c8:	e7b4      	b.n	8005234 <_malloc_r+0x4c>
 80052ca:	4613      	mov	r3, r2
 80052cc:	e7cc      	b.n	8005268 <_malloc_r+0x80>
 80052ce:	230c      	movs	r3, #12
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4638      	mov	r0, r7
 80052d4:	f000 f80e 	bl	80052f4 <__malloc_unlock>
 80052d8:	e797      	b.n	800520a <_malloc_r+0x22>
 80052da:	6025      	str	r5, [r4, #0]
 80052dc:	e7dc      	b.n	8005298 <_malloc_r+0xb0>
 80052de:	605b      	str	r3, [r3, #4]
 80052e0:	deff      	udf	#255	; 0xff
 80052e2:	bf00      	nop
 80052e4:	200002b0 	.word	0x200002b0

080052e8 <__malloc_lock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	; (80052f0 <__malloc_lock+0x8>)
 80052ea:	f7ff bf0f 	b.w	800510c <__retarget_lock_acquire_recursive>
 80052ee:	bf00      	nop
 80052f0:	200002ac 	.word	0x200002ac

080052f4 <__malloc_unlock>:
 80052f4:	4801      	ldr	r0, [pc, #4]	; (80052fc <__malloc_unlock+0x8>)
 80052f6:	f7ff bf0a 	b.w	800510e <__retarget_lock_release_recursive>
 80052fa:	bf00      	nop
 80052fc:	200002ac 	.word	0x200002ac

08005300 <__ssputs_r>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	688e      	ldr	r6, [r1, #8]
 8005306:	461f      	mov	r7, r3
 8005308:	42be      	cmp	r6, r7
 800530a:	680b      	ldr	r3, [r1, #0]
 800530c:	4682      	mov	sl, r0
 800530e:	460c      	mov	r4, r1
 8005310:	4690      	mov	r8, r2
 8005312:	d82c      	bhi.n	800536e <__ssputs_r+0x6e>
 8005314:	898a      	ldrh	r2, [r1, #12]
 8005316:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800531a:	d026      	beq.n	800536a <__ssputs_r+0x6a>
 800531c:	6965      	ldr	r5, [r4, #20]
 800531e:	6909      	ldr	r1, [r1, #16]
 8005320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005324:	eba3 0901 	sub.w	r9, r3, r1
 8005328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800532c:	1c7b      	adds	r3, r7, #1
 800532e:	444b      	add	r3, r9
 8005330:	106d      	asrs	r5, r5, #1
 8005332:	429d      	cmp	r5, r3
 8005334:	bf38      	it	cc
 8005336:	461d      	movcc	r5, r3
 8005338:	0553      	lsls	r3, r2, #21
 800533a:	d527      	bpl.n	800538c <__ssputs_r+0x8c>
 800533c:	4629      	mov	r1, r5
 800533e:	f7ff ff53 	bl	80051e8 <_malloc_r>
 8005342:	4606      	mov	r6, r0
 8005344:	b360      	cbz	r0, 80053a0 <__ssputs_r+0xa0>
 8005346:	6921      	ldr	r1, [r4, #16]
 8005348:	464a      	mov	r2, r9
 800534a:	f000 faeb 	bl	8005924 <memcpy>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	6126      	str	r6, [r4, #16]
 800535c:	6165      	str	r5, [r4, #20]
 800535e:	444e      	add	r6, r9
 8005360:	eba5 0509 	sub.w	r5, r5, r9
 8005364:	6026      	str	r6, [r4, #0]
 8005366:	60a5      	str	r5, [r4, #8]
 8005368:	463e      	mov	r6, r7
 800536a:	42be      	cmp	r6, r7
 800536c:	d900      	bls.n	8005370 <__ssputs_r+0x70>
 800536e:	463e      	mov	r6, r7
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	4632      	mov	r2, r6
 8005374:	4641      	mov	r1, r8
 8005376:	f000 faab 	bl	80058d0 <memmove>
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	1b9b      	subs	r3, r3, r6
 800537e:	60a3      	str	r3, [r4, #8]
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	4433      	add	r3, r6
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	2000      	movs	r0, #0
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	462a      	mov	r2, r5
 800538e:	f000 fad7 	bl	8005940 <_realloc_r>
 8005392:	4606      	mov	r6, r0
 8005394:	2800      	cmp	r0, #0
 8005396:	d1e0      	bne.n	800535a <__ssputs_r+0x5a>
 8005398:	6921      	ldr	r1, [r4, #16]
 800539a:	4650      	mov	r0, sl
 800539c:	f7ff feb8 	bl	8005110 <_free_r>
 80053a0:	230c      	movs	r3, #12
 80053a2:	f8ca 3000 	str.w	r3, [sl]
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	e7e9      	b.n	8005388 <__ssputs_r+0x88>

080053b4 <_svfiprintf_r>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	4698      	mov	r8, r3
 80053ba:	898b      	ldrh	r3, [r1, #12]
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	b09d      	sub	sp, #116	; 0x74
 80053c0:	4607      	mov	r7, r0
 80053c2:	460d      	mov	r5, r1
 80053c4:	4614      	mov	r4, r2
 80053c6:	d50e      	bpl.n	80053e6 <_svfiprintf_r+0x32>
 80053c8:	690b      	ldr	r3, [r1, #16]
 80053ca:	b963      	cbnz	r3, 80053e6 <_svfiprintf_r+0x32>
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	f7ff ff0b 	bl	80051e8 <_malloc_r>
 80053d2:	6028      	str	r0, [r5, #0]
 80053d4:	6128      	str	r0, [r5, #16]
 80053d6:	b920      	cbnz	r0, 80053e2 <_svfiprintf_r+0x2e>
 80053d8:	230c      	movs	r3, #12
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e0d0      	b.n	8005584 <_svfiprintf_r+0x1d0>
 80053e2:	2340      	movs	r3, #64	; 0x40
 80053e4:	616b      	str	r3, [r5, #20]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ea:	2320      	movs	r3, #32
 80053ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f4:	2330      	movs	r3, #48	; 0x30
 80053f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800559c <_svfiprintf_r+0x1e8>
 80053fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053fe:	f04f 0901 	mov.w	r9, #1
 8005402:	4623      	mov	r3, r4
 8005404:	469a      	mov	sl, r3
 8005406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800540a:	b10a      	cbz	r2, 8005410 <_svfiprintf_r+0x5c>
 800540c:	2a25      	cmp	r2, #37	; 0x25
 800540e:	d1f9      	bne.n	8005404 <_svfiprintf_r+0x50>
 8005410:	ebba 0b04 	subs.w	fp, sl, r4
 8005414:	d00b      	beq.n	800542e <_svfiprintf_r+0x7a>
 8005416:	465b      	mov	r3, fp
 8005418:	4622      	mov	r2, r4
 800541a:	4629      	mov	r1, r5
 800541c:	4638      	mov	r0, r7
 800541e:	f7ff ff6f 	bl	8005300 <__ssputs_r>
 8005422:	3001      	adds	r0, #1
 8005424:	f000 80a9 	beq.w	800557a <_svfiprintf_r+0x1c6>
 8005428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800542a:	445a      	add	r2, fp
 800542c:	9209      	str	r2, [sp, #36]	; 0x24
 800542e:	f89a 3000 	ldrb.w	r3, [sl]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80a1 	beq.w	800557a <_svfiprintf_r+0x1c6>
 8005438:	2300      	movs	r3, #0
 800543a:	f04f 32ff 	mov.w	r2, #4294967295
 800543e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005442:	f10a 0a01 	add.w	sl, sl, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800544e:	931a      	str	r3, [sp, #104]	; 0x68
 8005450:	4654      	mov	r4, sl
 8005452:	2205      	movs	r2, #5
 8005454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005458:	4850      	ldr	r0, [pc, #320]	; (800559c <_svfiprintf_r+0x1e8>)
 800545a:	f7fa fec1 	bl	80001e0 <memchr>
 800545e:	9a04      	ldr	r2, [sp, #16]
 8005460:	b9d8      	cbnz	r0, 800549a <_svfiprintf_r+0xe6>
 8005462:	06d0      	lsls	r0, r2, #27
 8005464:	bf44      	itt	mi
 8005466:	2320      	movmi	r3, #32
 8005468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546c:	0711      	lsls	r1, r2, #28
 800546e:	bf44      	itt	mi
 8005470:	232b      	movmi	r3, #43	; 0x2b
 8005472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b2a      	cmp	r3, #42	; 0x2a
 800547c:	d015      	beq.n	80054aa <_svfiprintf_r+0xf6>
 800547e:	9a07      	ldr	r2, [sp, #28]
 8005480:	4654      	mov	r4, sl
 8005482:	2000      	movs	r0, #0
 8005484:	f04f 0c0a 	mov.w	ip, #10
 8005488:	4621      	mov	r1, r4
 800548a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548e:	3b30      	subs	r3, #48	; 0x30
 8005490:	2b09      	cmp	r3, #9
 8005492:	d94d      	bls.n	8005530 <_svfiprintf_r+0x17c>
 8005494:	b1b0      	cbz	r0, 80054c4 <_svfiprintf_r+0x110>
 8005496:	9207      	str	r2, [sp, #28]
 8005498:	e014      	b.n	80054c4 <_svfiprintf_r+0x110>
 800549a:	eba0 0308 	sub.w	r3, r0, r8
 800549e:	fa09 f303 	lsl.w	r3, r9, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	46a2      	mov	sl, r4
 80054a8:	e7d2      	b.n	8005450 <_svfiprintf_r+0x9c>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	9103      	str	r1, [sp, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfbb      	ittet	lt
 80054b6:	425b      	neglt	r3, r3
 80054b8:	f042 0202 	orrlt.w	r2, r2, #2
 80054bc:	9307      	strge	r3, [sp, #28]
 80054be:	9307      	strlt	r3, [sp, #28]
 80054c0:	bfb8      	it	lt
 80054c2:	9204      	strlt	r2, [sp, #16]
 80054c4:	7823      	ldrb	r3, [r4, #0]
 80054c6:	2b2e      	cmp	r3, #46	; 0x2e
 80054c8:	d10c      	bne.n	80054e4 <_svfiprintf_r+0x130>
 80054ca:	7863      	ldrb	r3, [r4, #1]
 80054cc:	2b2a      	cmp	r3, #42	; 0x2a
 80054ce:	d134      	bne.n	800553a <_svfiprintf_r+0x186>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9203      	str	r2, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfb8      	it	lt
 80054dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80054e0:	3402      	adds	r4, #2
 80054e2:	9305      	str	r3, [sp, #20]
 80054e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80055ac <_svfiprintf_r+0x1f8>
 80054e8:	7821      	ldrb	r1, [r4, #0]
 80054ea:	2203      	movs	r2, #3
 80054ec:	4650      	mov	r0, sl
 80054ee:	f7fa fe77 	bl	80001e0 <memchr>
 80054f2:	b138      	cbz	r0, 8005504 <_svfiprintf_r+0x150>
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	eba0 000a 	sub.w	r0, r0, sl
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	4082      	lsls	r2, r0
 80054fe:	4313      	orrs	r3, r2
 8005500:	3401      	adds	r4, #1
 8005502:	9304      	str	r3, [sp, #16]
 8005504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005508:	4825      	ldr	r0, [pc, #148]	; (80055a0 <_svfiprintf_r+0x1ec>)
 800550a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800550e:	2206      	movs	r2, #6
 8005510:	f7fa fe66 	bl	80001e0 <memchr>
 8005514:	2800      	cmp	r0, #0
 8005516:	d038      	beq.n	800558a <_svfiprintf_r+0x1d6>
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <_svfiprintf_r+0x1f0>)
 800551a:	bb1b      	cbnz	r3, 8005564 <_svfiprintf_r+0x1b0>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	3307      	adds	r3, #7
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	3308      	adds	r3, #8
 8005526:	9303      	str	r3, [sp, #12]
 8005528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552a:	4433      	add	r3, r6
 800552c:	9309      	str	r3, [sp, #36]	; 0x24
 800552e:	e768      	b.n	8005402 <_svfiprintf_r+0x4e>
 8005530:	fb0c 3202 	mla	r2, ip, r2, r3
 8005534:	460c      	mov	r4, r1
 8005536:	2001      	movs	r0, #1
 8005538:	e7a6      	b.n	8005488 <_svfiprintf_r+0xd4>
 800553a:	2300      	movs	r3, #0
 800553c:	3401      	adds	r4, #1
 800553e:	9305      	str	r3, [sp, #20]
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0c0a 	mov.w	ip, #10
 8005546:	4620      	mov	r0, r4
 8005548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800554c:	3a30      	subs	r2, #48	; 0x30
 800554e:	2a09      	cmp	r2, #9
 8005550:	d903      	bls.n	800555a <_svfiprintf_r+0x1a6>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0c6      	beq.n	80054e4 <_svfiprintf_r+0x130>
 8005556:	9105      	str	r1, [sp, #20]
 8005558:	e7c4      	b.n	80054e4 <_svfiprintf_r+0x130>
 800555a:	fb0c 2101 	mla	r1, ip, r1, r2
 800555e:	4604      	mov	r4, r0
 8005560:	2301      	movs	r3, #1
 8005562:	e7f0      	b.n	8005546 <_svfiprintf_r+0x192>
 8005564:	ab03      	add	r3, sp, #12
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	462a      	mov	r2, r5
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <_svfiprintf_r+0x1f4>)
 800556c:	a904      	add	r1, sp, #16
 800556e:	4638      	mov	r0, r7
 8005570:	f3af 8000 	nop.w
 8005574:	1c42      	adds	r2, r0, #1
 8005576:	4606      	mov	r6, r0
 8005578:	d1d6      	bne.n	8005528 <_svfiprintf_r+0x174>
 800557a:	89ab      	ldrh	r3, [r5, #12]
 800557c:	065b      	lsls	r3, r3, #25
 800557e:	f53f af2d 	bmi.w	80053dc <_svfiprintf_r+0x28>
 8005582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005584:	b01d      	add	sp, #116	; 0x74
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	ab03      	add	r3, sp, #12
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	462a      	mov	r2, r5
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <_svfiprintf_r+0x1f4>)
 8005592:	a904      	add	r1, sp, #16
 8005594:	4638      	mov	r0, r7
 8005596:	f000 f879 	bl	800568c <_printf_i>
 800559a:	e7eb      	b.n	8005574 <_svfiprintf_r+0x1c0>
 800559c:	08006944 	.word	0x08006944
 80055a0:	0800694e 	.word	0x0800694e
 80055a4:	00000000 	.word	0x00000000
 80055a8:	08005301 	.word	0x08005301
 80055ac:	0800694a 	.word	0x0800694a

080055b0 <_printf_common>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	4616      	mov	r6, r2
 80055b6:	4699      	mov	r9, r3
 80055b8:	688a      	ldr	r2, [r1, #8]
 80055ba:	690b      	ldr	r3, [r1, #16]
 80055bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bfb8      	it	lt
 80055c4:	4613      	movlt	r3, r2
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055cc:	4607      	mov	r7, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	b10a      	cbz	r2, 80055d6 <_printf_common+0x26>
 80055d2:	3301      	adds	r3, #1
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	0699      	lsls	r1, r3, #26
 80055da:	bf42      	ittt	mi
 80055dc:	6833      	ldrmi	r3, [r6, #0]
 80055de:	3302      	addmi	r3, #2
 80055e0:	6033      	strmi	r3, [r6, #0]
 80055e2:	6825      	ldr	r5, [r4, #0]
 80055e4:	f015 0506 	ands.w	r5, r5, #6
 80055e8:	d106      	bne.n	80055f8 <_printf_common+0x48>
 80055ea:	f104 0a19 	add.w	sl, r4, #25
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	6832      	ldr	r2, [r6, #0]
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	dc26      	bgt.n	8005646 <_printf_common+0x96>
 80055f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055fc:	1e13      	subs	r3, r2, #0
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	bf18      	it	ne
 8005602:	2301      	movne	r3, #1
 8005604:	0692      	lsls	r2, r2, #26
 8005606:	d42b      	bmi.n	8005660 <_printf_common+0xb0>
 8005608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d01e      	beq.n	8005654 <_printf_common+0xa4>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	2b04      	cmp	r3, #4
 8005620:	bf02      	ittt	eq
 8005622:	68e5      	ldreq	r5, [r4, #12]
 8005624:	6833      	ldreq	r3, [r6, #0]
 8005626:	1aed      	subeq	r5, r5, r3
 8005628:	68a3      	ldr	r3, [r4, #8]
 800562a:	bf0c      	ite	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	2500      	movne	r5, #0
 8005632:	4293      	cmp	r3, r2
 8005634:	bfc4      	itt	gt
 8005636:	1a9b      	subgt	r3, r3, r2
 8005638:	18ed      	addgt	r5, r5, r3
 800563a:	2600      	movs	r6, #0
 800563c:	341a      	adds	r4, #26
 800563e:	42b5      	cmp	r5, r6
 8005640:	d11a      	bne.n	8005678 <_printf_common+0xc8>
 8005642:	2000      	movs	r0, #0
 8005644:	e008      	b.n	8005658 <_printf_common+0xa8>
 8005646:	2301      	movs	r3, #1
 8005648:	4652      	mov	r2, sl
 800564a:	4649      	mov	r1, r9
 800564c:	4638      	mov	r0, r7
 800564e:	47c0      	blx	r8
 8005650:	3001      	adds	r0, #1
 8005652:	d103      	bne.n	800565c <_printf_common+0xac>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565c:	3501      	adds	r5, #1
 800565e:	e7c6      	b.n	80055ee <_printf_common+0x3e>
 8005660:	18e1      	adds	r1, r4, r3
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	2030      	movs	r0, #48	; 0x30
 8005666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800566a:	4422      	add	r2, r4
 800566c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005674:	3302      	adds	r3, #2
 8005676:	e7c7      	b.n	8005608 <_printf_common+0x58>
 8005678:	2301      	movs	r3, #1
 800567a:	4622      	mov	r2, r4
 800567c:	4649      	mov	r1, r9
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d0e6      	beq.n	8005654 <_printf_common+0xa4>
 8005686:	3601      	adds	r6, #1
 8005688:	e7d9      	b.n	800563e <_printf_common+0x8e>
	...

0800568c <_printf_i>:
 800568c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	7e0f      	ldrb	r7, [r1, #24]
 8005692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005694:	2f78      	cmp	r7, #120	; 0x78
 8005696:	4691      	mov	r9, r2
 8005698:	4680      	mov	r8, r0
 800569a:	460c      	mov	r4, r1
 800569c:	469a      	mov	sl, r3
 800569e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056a2:	d807      	bhi.n	80056b4 <_printf_i+0x28>
 80056a4:	2f62      	cmp	r7, #98	; 0x62
 80056a6:	d80a      	bhi.n	80056be <_printf_i+0x32>
 80056a8:	2f00      	cmp	r7, #0
 80056aa:	f000 80d4 	beq.w	8005856 <_printf_i+0x1ca>
 80056ae:	2f58      	cmp	r7, #88	; 0x58
 80056b0:	f000 80c0 	beq.w	8005834 <_printf_i+0x1a8>
 80056b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056bc:	e03a      	b.n	8005734 <_printf_i+0xa8>
 80056be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056c2:	2b15      	cmp	r3, #21
 80056c4:	d8f6      	bhi.n	80056b4 <_printf_i+0x28>
 80056c6:	a101      	add	r1, pc, #4	; (adr r1, 80056cc <_printf_i+0x40>)
 80056c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005739 	.word	0x08005739
 80056d4:	080056b5 	.word	0x080056b5
 80056d8:	080056b5 	.word	0x080056b5
 80056dc:	080056b5 	.word	0x080056b5
 80056e0:	080056b5 	.word	0x080056b5
 80056e4:	08005739 	.word	0x08005739
 80056e8:	080056b5 	.word	0x080056b5
 80056ec:	080056b5 	.word	0x080056b5
 80056f0:	080056b5 	.word	0x080056b5
 80056f4:	080056b5 	.word	0x080056b5
 80056f8:	0800583d 	.word	0x0800583d
 80056fc:	08005765 	.word	0x08005765
 8005700:	080057f7 	.word	0x080057f7
 8005704:	080056b5 	.word	0x080056b5
 8005708:	080056b5 	.word	0x080056b5
 800570c:	0800585f 	.word	0x0800585f
 8005710:	080056b5 	.word	0x080056b5
 8005714:	08005765 	.word	0x08005765
 8005718:	080056b5 	.word	0x080056b5
 800571c:	080056b5 	.word	0x080056b5
 8005720:	080057ff 	.word	0x080057ff
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	602a      	str	r2, [r5, #0]
 800572c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005734:	2301      	movs	r3, #1
 8005736:	e09f      	b.n	8005878 <_printf_i+0x1ec>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	0607      	lsls	r7, r0, #24
 800573e:	f103 0104 	add.w	r1, r3, #4
 8005742:	6029      	str	r1, [r5, #0]
 8005744:	d501      	bpl.n	800574a <_printf_i+0xbe>
 8005746:	681e      	ldr	r6, [r3, #0]
 8005748:	e003      	b.n	8005752 <_printf_i+0xc6>
 800574a:	0646      	lsls	r6, r0, #25
 800574c:	d5fb      	bpl.n	8005746 <_printf_i+0xba>
 800574e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005752:	2e00      	cmp	r6, #0
 8005754:	da03      	bge.n	800575e <_printf_i+0xd2>
 8005756:	232d      	movs	r3, #45	; 0x2d
 8005758:	4276      	negs	r6, r6
 800575a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575e:	485a      	ldr	r0, [pc, #360]	; (80058c8 <_printf_i+0x23c>)
 8005760:	230a      	movs	r3, #10
 8005762:	e012      	b.n	800578a <_printf_i+0xfe>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	0605      	lsls	r5, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xe8>
 8005770:	681e      	ldr	r6, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0xee>
 8005774:	0641      	lsls	r1, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xe4>
 8005778:	881e      	ldrh	r6, [r3, #0]
 800577a:	4853      	ldr	r0, [pc, #332]	; (80058c8 <_printf_i+0x23c>)
 800577c:	2f6f      	cmp	r7, #111	; 0x6f
 800577e:	bf0c      	ite	eq
 8005780:	2308      	moveq	r3, #8
 8005782:	230a      	movne	r3, #10
 8005784:	2100      	movs	r1, #0
 8005786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800578a:	6865      	ldr	r5, [r4, #4]
 800578c:	60a5      	str	r5, [r4, #8]
 800578e:	2d00      	cmp	r5, #0
 8005790:	bfa2      	ittt	ge
 8005792:	6821      	ldrge	r1, [r4, #0]
 8005794:	f021 0104 	bicge.w	r1, r1, #4
 8005798:	6021      	strge	r1, [r4, #0]
 800579a:	b90e      	cbnz	r6, 80057a0 <_printf_i+0x114>
 800579c:	2d00      	cmp	r5, #0
 800579e:	d04b      	beq.n	8005838 <_printf_i+0x1ac>
 80057a0:	4615      	mov	r5, r2
 80057a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80057a6:	fb03 6711 	mls	r7, r3, r1, r6
 80057aa:	5dc7      	ldrb	r7, [r0, r7]
 80057ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b0:	4637      	mov	r7, r6
 80057b2:	42bb      	cmp	r3, r7
 80057b4:	460e      	mov	r6, r1
 80057b6:	d9f4      	bls.n	80057a2 <_printf_i+0x116>
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d10b      	bne.n	80057d4 <_printf_i+0x148>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07de      	lsls	r6, r3, #31
 80057c0:	d508      	bpl.n	80057d4 <_printf_i+0x148>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	6861      	ldr	r1, [r4, #4]
 80057c6:	4299      	cmp	r1, r3
 80057c8:	bfde      	ittt	le
 80057ca:	2330      	movle	r3, #48	; 0x30
 80057cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d4:	1b52      	subs	r2, r2, r5
 80057d6:	6122      	str	r2, [r4, #16]
 80057d8:	f8cd a000 	str.w	sl, [sp]
 80057dc:	464b      	mov	r3, r9
 80057de:	aa03      	add	r2, sp, #12
 80057e0:	4621      	mov	r1, r4
 80057e2:	4640      	mov	r0, r8
 80057e4:	f7ff fee4 	bl	80055b0 <_printf_common>
 80057e8:	3001      	adds	r0, #1
 80057ea:	d14a      	bne.n	8005882 <_printf_i+0x1f6>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	b004      	add	sp, #16
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f043 0320 	orr.w	r3, r3, #32
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	4833      	ldr	r0, [pc, #204]	; (80058cc <_printf_i+0x240>)
 8005800:	2778      	movs	r7, #120	; 0x78
 8005802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	6829      	ldr	r1, [r5, #0]
 800580a:	061f      	lsls	r7, r3, #24
 800580c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005810:	d402      	bmi.n	8005818 <_printf_i+0x18c>
 8005812:	065f      	lsls	r7, r3, #25
 8005814:	bf48      	it	mi
 8005816:	b2b6      	uxthmi	r6, r6
 8005818:	07df      	lsls	r7, r3, #31
 800581a:	bf48      	it	mi
 800581c:	f043 0320 	orrmi.w	r3, r3, #32
 8005820:	6029      	str	r1, [r5, #0]
 8005822:	bf48      	it	mi
 8005824:	6023      	strmi	r3, [r4, #0]
 8005826:	b91e      	cbnz	r6, 8005830 <_printf_i+0x1a4>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	f023 0320 	bic.w	r3, r3, #32
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	2310      	movs	r3, #16
 8005832:	e7a7      	b.n	8005784 <_printf_i+0xf8>
 8005834:	4824      	ldr	r0, [pc, #144]	; (80058c8 <_printf_i+0x23c>)
 8005836:	e7e4      	b.n	8005802 <_printf_i+0x176>
 8005838:	4615      	mov	r5, r2
 800583a:	e7bd      	b.n	80057b8 <_printf_i+0x12c>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	6826      	ldr	r6, [r4, #0]
 8005840:	6961      	ldr	r1, [r4, #20]
 8005842:	1d18      	adds	r0, r3, #4
 8005844:	6028      	str	r0, [r5, #0]
 8005846:	0635      	lsls	r5, r6, #24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	d501      	bpl.n	8005850 <_printf_i+0x1c4>
 800584c:	6019      	str	r1, [r3, #0]
 800584e:	e002      	b.n	8005856 <_printf_i+0x1ca>
 8005850:	0670      	lsls	r0, r6, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0x1c0>
 8005854:	8019      	strh	r1, [r3, #0]
 8005856:	2300      	movs	r3, #0
 8005858:	6123      	str	r3, [r4, #16]
 800585a:	4615      	mov	r5, r2
 800585c:	e7bc      	b.n	80057d8 <_printf_i+0x14c>
 800585e:	682b      	ldr	r3, [r5, #0]
 8005860:	1d1a      	adds	r2, r3, #4
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	681d      	ldr	r5, [r3, #0]
 8005866:	6862      	ldr	r2, [r4, #4]
 8005868:	2100      	movs	r1, #0
 800586a:	4628      	mov	r0, r5
 800586c:	f7fa fcb8 	bl	80001e0 <memchr>
 8005870:	b108      	cbz	r0, 8005876 <_printf_i+0x1ea>
 8005872:	1b40      	subs	r0, r0, r5
 8005874:	6060      	str	r0, [r4, #4]
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	2300      	movs	r3, #0
 800587c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005880:	e7aa      	b.n	80057d8 <_printf_i+0x14c>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	462a      	mov	r2, r5
 8005886:	4649      	mov	r1, r9
 8005888:	4640      	mov	r0, r8
 800588a:	47d0      	blx	sl
 800588c:	3001      	adds	r0, #1
 800588e:	d0ad      	beq.n	80057ec <_printf_i+0x160>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	079b      	lsls	r3, r3, #30
 8005894:	d413      	bmi.n	80058be <_printf_i+0x232>
 8005896:	68e0      	ldr	r0, [r4, #12]
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	4298      	cmp	r0, r3
 800589c:	bfb8      	it	lt
 800589e:	4618      	movlt	r0, r3
 80058a0:	e7a6      	b.n	80057f0 <_printf_i+0x164>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4632      	mov	r2, r6
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	47d0      	blx	sl
 80058ac:	3001      	adds	r0, #1
 80058ae:	d09d      	beq.n	80057ec <_printf_i+0x160>
 80058b0:	3501      	adds	r5, #1
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	1a5b      	subs	r3, r3, r1
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	dcf2      	bgt.n	80058a2 <_printf_i+0x216>
 80058bc:	e7eb      	b.n	8005896 <_printf_i+0x20a>
 80058be:	2500      	movs	r5, #0
 80058c0:	f104 0619 	add.w	r6, r4, #25
 80058c4:	e7f5      	b.n	80058b2 <_printf_i+0x226>
 80058c6:	bf00      	nop
 80058c8:	08006955 	.word	0x08006955
 80058cc:	08006966 	.word	0x08006966

080058d0 <memmove>:
 80058d0:	4288      	cmp	r0, r1
 80058d2:	b510      	push	{r4, lr}
 80058d4:	eb01 0402 	add.w	r4, r1, r2
 80058d8:	d902      	bls.n	80058e0 <memmove+0x10>
 80058da:	4284      	cmp	r4, r0
 80058dc:	4623      	mov	r3, r4
 80058de:	d807      	bhi.n	80058f0 <memmove+0x20>
 80058e0:	1e43      	subs	r3, r0, #1
 80058e2:	42a1      	cmp	r1, r4
 80058e4:	d008      	beq.n	80058f8 <memmove+0x28>
 80058e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ee:	e7f8      	b.n	80058e2 <memmove+0x12>
 80058f0:	4402      	add	r2, r0
 80058f2:	4601      	mov	r1, r0
 80058f4:	428a      	cmp	r2, r1
 80058f6:	d100      	bne.n	80058fa <memmove+0x2a>
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005902:	e7f7      	b.n	80058f4 <memmove+0x24>

08005904 <_sbrk_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d06      	ldr	r5, [pc, #24]	; (8005920 <_sbrk_r+0x1c>)
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	4608      	mov	r0, r1
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	f7fb ff20 	bl	8001754 <_sbrk>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_sbrk_r+0x1a>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_sbrk_r+0x1a>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200002a8 	.word	0x200002a8

08005924 <memcpy>:
 8005924:	440a      	add	r2, r1
 8005926:	4291      	cmp	r1, r2
 8005928:	f100 33ff 	add.w	r3, r0, #4294967295
 800592c:	d100      	bne.n	8005930 <memcpy+0xc>
 800592e:	4770      	bx	lr
 8005930:	b510      	push	{r4, lr}
 8005932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800593a:	4291      	cmp	r1, r2
 800593c:	d1f9      	bne.n	8005932 <memcpy+0xe>
 800593e:	bd10      	pop	{r4, pc}

08005940 <_realloc_r>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4680      	mov	r8, r0
 8005946:	4614      	mov	r4, r2
 8005948:	460e      	mov	r6, r1
 800594a:	b921      	cbnz	r1, 8005956 <_realloc_r+0x16>
 800594c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	4611      	mov	r1, r2
 8005952:	f7ff bc49 	b.w	80051e8 <_malloc_r>
 8005956:	b92a      	cbnz	r2, 8005964 <_realloc_r+0x24>
 8005958:	f7ff fbda 	bl	8005110 <_free_r>
 800595c:	4625      	mov	r5, r4
 800595e:	4628      	mov	r0, r5
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005964:	f000 f81b 	bl	800599e <_malloc_usable_size_r>
 8005968:	4284      	cmp	r4, r0
 800596a:	4607      	mov	r7, r0
 800596c:	d802      	bhi.n	8005974 <_realloc_r+0x34>
 800596e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005972:	d812      	bhi.n	800599a <_realloc_r+0x5a>
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff fc36 	bl	80051e8 <_malloc_r>
 800597c:	4605      	mov	r5, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	d0ed      	beq.n	800595e <_realloc_r+0x1e>
 8005982:	42bc      	cmp	r4, r7
 8005984:	4622      	mov	r2, r4
 8005986:	4631      	mov	r1, r6
 8005988:	bf28      	it	cs
 800598a:	463a      	movcs	r2, r7
 800598c:	f7ff ffca 	bl	8005924 <memcpy>
 8005990:	4631      	mov	r1, r6
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fbbc 	bl	8005110 <_free_r>
 8005998:	e7e1      	b.n	800595e <_realloc_r+0x1e>
 800599a:	4635      	mov	r5, r6
 800599c:	e7df      	b.n	800595e <_realloc_r+0x1e>

0800599e <_malloc_usable_size_r>:
 800599e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a2:	1f18      	subs	r0, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfbc      	itt	lt
 80059a8:	580b      	ldrlt	r3, [r1, r0]
 80059aa:	18c0      	addlt	r0, r0, r3
 80059ac:	4770      	bx	lr
	...

080059b0 <pow>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	ed2d 8b02 	vpush	{d8}
 80059b6:	eeb0 8a40 	vmov.f32	s16, s0
 80059ba:	eef0 8a60 	vmov.f32	s17, s1
 80059be:	ec55 4b11 	vmov	r4, r5, d1
 80059c2:	f000 f871 	bl	8005aa8 <__ieee754_pow>
 80059c6:	4622      	mov	r2, r4
 80059c8:	462b      	mov	r3, r5
 80059ca:	4620      	mov	r0, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	ec57 6b10 	vmov	r6, r7, d0
 80059d2:	f7fb f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d13b      	bne.n	8005a52 <pow+0xa2>
 80059da:	ec51 0b18 	vmov	r0, r1, d8
 80059de:	2200      	movs	r2, #0
 80059e0:	2300      	movs	r3, #0
 80059e2:	f7fb f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e6:	b1b8      	cbz	r0, 8005a18 <pow+0x68>
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	4620      	mov	r0, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7fb f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d146      	bne.n	8005a86 <pow+0xd6>
 80059f8:	ec45 4b10 	vmov	d0, r4, r5
 80059fc:	f000 f848 	bl	8005a90 <finite>
 8005a00:	b338      	cbz	r0, 8005a52 <pow+0xa2>
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fb f867 	bl	8000adc <__aeabi_dcmplt>
 8005a0e:	b300      	cbz	r0, 8005a52 <pow+0xa2>
 8005a10:	f7ff fb52 	bl	80050b8 <__errno>
 8005a14:	2322      	movs	r3, #34	; 0x22
 8005a16:	e01b      	b.n	8005a50 <pow+0xa0>
 8005a18:	ec47 6b10 	vmov	d0, r6, r7
 8005a1c:	f000 f838 	bl	8005a90 <finite>
 8005a20:	b9e0      	cbnz	r0, 8005a5c <pow+0xac>
 8005a22:	eeb0 0a48 	vmov.f32	s0, s16
 8005a26:	eef0 0a68 	vmov.f32	s1, s17
 8005a2a:	f000 f831 	bl	8005a90 <finite>
 8005a2e:	b1a8      	cbz	r0, 8005a5c <pow+0xac>
 8005a30:	ec45 4b10 	vmov	d0, r4, r5
 8005a34:	f000 f82c 	bl	8005a90 <finite>
 8005a38:	b180      	cbz	r0, 8005a5c <pow+0xac>
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fb f873 	bl	8000b2c <__aeabi_dcmpun>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0e2      	beq.n	8005a10 <pow+0x60>
 8005a4a:	f7ff fb35 	bl	80050b8 <__errno>
 8005a4e:	2321      	movs	r3, #33	; 0x21
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	ecbd 8b02 	vpop	{d8}
 8005a56:	ec47 6b10 	vmov	d0, r6, r7
 8005a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4630      	mov	r0, r6
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fb f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0f2      	beq.n	8005a52 <pow+0xa2>
 8005a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8005a70:	eef0 0a68 	vmov.f32	s1, s17
 8005a74:	f000 f80c 	bl	8005a90 <finite>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d0ea      	beq.n	8005a52 <pow+0xa2>
 8005a7c:	ec45 4b10 	vmov	d0, r4, r5
 8005a80:	f000 f806 	bl	8005a90 <finite>
 8005a84:	e7c3      	b.n	8005a0e <pow+0x5e>
 8005a86:	4f01      	ldr	r7, [pc, #4]	; (8005a8c <pow+0xdc>)
 8005a88:	2600      	movs	r6, #0
 8005a8a:	e7e2      	b.n	8005a52 <pow+0xa2>
 8005a8c:	3ff00000 	.word	0x3ff00000

08005a90 <finite>:
 8005a90:	b082      	sub	sp, #8
 8005a92:	ed8d 0b00 	vstr	d0, [sp]
 8005a96:	9801      	ldr	r0, [sp, #4]
 8005a98:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005aa0:	0fc0      	lsrs	r0, r0, #31
 8005aa2:	b002      	add	sp, #8
 8005aa4:	4770      	bx	lr
	...

08005aa8 <__ieee754_pow>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	ed2d 8b06 	vpush	{d8-d10}
 8005ab0:	b089      	sub	sp, #36	; 0x24
 8005ab2:	ed8d 1b00 	vstr	d1, [sp]
 8005ab6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005aba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005abe:	ea58 0102 	orrs.w	r1, r8, r2
 8005ac2:	ec57 6b10 	vmov	r6, r7, d0
 8005ac6:	d115      	bne.n	8005af4 <__ieee754_pow+0x4c>
 8005ac8:	19b3      	adds	r3, r6, r6
 8005aca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005ace:	4152      	adcs	r2, r2
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	4b89      	ldr	r3, [pc, #548]	; (8005cf8 <__ieee754_pow+0x250>)
 8005ad4:	4193      	sbcs	r3, r2
 8005ad6:	f080 84d1 	bcs.w	800647c <__ieee754_pow+0x9d4>
 8005ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fbd3 	bl	800028c <__adddf3>
 8005ae6:	ec41 0b10 	vmov	d0, r0, r1
 8005aea:	b009      	add	sp, #36	; 0x24
 8005aec:	ecbd 8b06 	vpop	{d8-d10}
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <__ieee754_pow+0x254>)
 8005af6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005afa:	429c      	cmp	r4, r3
 8005afc:	ee10 aa10 	vmov	sl, s0
 8005b00:	463d      	mov	r5, r7
 8005b02:	dc06      	bgt.n	8005b12 <__ieee754_pow+0x6a>
 8005b04:	d101      	bne.n	8005b0a <__ieee754_pow+0x62>
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	d1e7      	bne.n	8005ada <__ieee754_pow+0x32>
 8005b0a:	4598      	cmp	r8, r3
 8005b0c:	dc01      	bgt.n	8005b12 <__ieee754_pow+0x6a>
 8005b0e:	d10f      	bne.n	8005b30 <__ieee754_pow+0x88>
 8005b10:	b172      	cbz	r2, 8005b30 <__ieee754_pow+0x88>
 8005b12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005b16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005b1a:	ea55 050a 	orrs.w	r5, r5, sl
 8005b1e:	d1dc      	bne.n	8005ada <__ieee754_pow+0x32>
 8005b20:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b24:	18db      	adds	r3, r3, r3
 8005b26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005b2a:	4152      	adcs	r2, r2
 8005b2c:	429d      	cmp	r5, r3
 8005b2e:	e7d0      	b.n	8005ad2 <__ieee754_pow+0x2a>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da3b      	bge.n	8005bac <__ieee754_pow+0x104>
 8005b34:	4b72      	ldr	r3, [pc, #456]	; (8005d00 <__ieee754_pow+0x258>)
 8005b36:	4598      	cmp	r8, r3
 8005b38:	dc51      	bgt.n	8005bde <__ieee754_pow+0x136>
 8005b3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005b3e:	4598      	cmp	r8, r3
 8005b40:	f340 84ab 	ble.w	800649a <__ieee754_pow+0x9f2>
 8005b44:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b4c:	2b14      	cmp	r3, #20
 8005b4e:	dd0f      	ble.n	8005b70 <__ieee754_pow+0xc8>
 8005b50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005b54:	fa22 f103 	lsr.w	r1, r2, r3
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 849c 	bne.w	800649a <__ieee754_pow+0x9f2>
 8005b62:	f001 0101 	and.w	r1, r1, #1
 8005b66:	f1c1 0302 	rsb	r3, r1, #2
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	b182      	cbz	r2, 8005b90 <__ieee754_pow+0xe8>
 8005b6e:	e05f      	b.n	8005c30 <__ieee754_pow+0x188>
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	d15b      	bne.n	8005c2c <__ieee754_pow+0x184>
 8005b74:	f1c3 0314 	rsb	r3, r3, #20
 8005b78:	fa48 f103 	asr.w	r1, r8, r3
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	4543      	cmp	r3, r8
 8005b82:	f040 8487 	bne.w	8006494 <__ieee754_pow+0x9ec>
 8005b86:	f001 0101 	and.w	r1, r1, #1
 8005b8a:	f1c1 0302 	rsb	r3, r1, #2
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <__ieee754_pow+0x25c>)
 8005b92:	4598      	cmp	r8, r3
 8005b94:	d132      	bne.n	8005bfc <__ieee754_pow+0x154>
 8005b96:	f1b9 0f00 	cmp.w	r9, #0
 8005b9a:	f280 8477 	bge.w	800648c <__ieee754_pow+0x9e4>
 8005b9e:	4959      	ldr	r1, [pc, #356]	; (8005d04 <__ieee754_pow+0x25c>)
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f7fa fe51 	bl	800084c <__aeabi_ddiv>
 8005baa:	e79c      	b.n	8005ae6 <__ieee754_pow+0x3e>
 8005bac:	2300      	movs	r3, #0
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d13d      	bne.n	8005c30 <__ieee754_pow+0x188>
 8005bb4:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <__ieee754_pow+0x254>)
 8005bb6:	4598      	cmp	r8, r3
 8005bb8:	d1ea      	bne.n	8005b90 <__ieee754_pow+0xe8>
 8005bba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005bbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005bc2:	ea53 030a 	orrs.w	r3, r3, sl
 8005bc6:	f000 8459 	beq.w	800647c <__ieee754_pow+0x9d4>
 8005bca:	4b4f      	ldr	r3, [pc, #316]	; (8005d08 <__ieee754_pow+0x260>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	dd08      	ble.n	8005be2 <__ieee754_pow+0x13a>
 8005bd0:	f1b9 0f00 	cmp.w	r9, #0
 8005bd4:	f2c0 8456 	blt.w	8006484 <__ieee754_pow+0x9dc>
 8005bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bdc:	e783      	b.n	8005ae6 <__ieee754_pow+0x3e>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e7e5      	b.n	8005bae <__ieee754_pow+0x106>
 8005be2:	f1b9 0f00 	cmp.w	r9, #0
 8005be6:	f04f 0000 	mov.w	r0, #0
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f6bf af7a 	bge.w	8005ae6 <__ieee754_pow+0x3e>
 8005bf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005bf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005bfa:	e774      	b.n	8005ae6 <__ieee754_pow+0x3e>
 8005bfc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005c00:	d106      	bne.n	8005c10 <__ieee754_pow+0x168>
 8005c02:	4632      	mov	r2, r6
 8005c04:	463b      	mov	r3, r7
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa fcf5 	bl	80005f8 <__aeabi_dmul>
 8005c0e:	e76a      	b.n	8005ae6 <__ieee754_pow+0x3e>
 8005c10:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <__ieee754_pow+0x264>)
 8005c12:	4599      	cmp	r9, r3
 8005c14:	d10c      	bne.n	8005c30 <__ieee754_pow+0x188>
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	db0a      	blt.n	8005c30 <__ieee754_pow+0x188>
 8005c1a:	ec47 6b10 	vmov	d0, r6, r7
 8005c1e:	b009      	add	sp, #36	; 0x24
 8005c20:	ecbd 8b06 	vpop	{d8-d10}
 8005c24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	f000 bd20 	b.w	800666c <__ieee754_sqrt>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	ec47 6b10 	vmov	d0, r6, r7
 8005c34:	f000 fc62 	bl	80064fc <fabs>
 8005c38:	ec51 0b10 	vmov	r0, r1, d0
 8005c3c:	f1ba 0f00 	cmp.w	sl, #0
 8005c40:	d129      	bne.n	8005c96 <__ieee754_pow+0x1ee>
 8005c42:	b124      	cbz	r4, 8005c4e <__ieee754_pow+0x1a6>
 8005c44:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <__ieee754_pow+0x25c>)
 8005c46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d123      	bne.n	8005c96 <__ieee754_pow+0x1ee>
 8005c4e:	f1b9 0f00 	cmp.w	r9, #0
 8005c52:	da05      	bge.n	8005c60 <__ieee754_pow+0x1b8>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	2000      	movs	r0, #0
 8005c5a:	492a      	ldr	r1, [pc, #168]	; (8005d04 <__ieee754_pow+0x25c>)
 8005c5c:	f7fa fdf6 	bl	800084c <__aeabi_ddiv>
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	f6bf af40 	bge.w	8005ae6 <__ieee754_pow+0x3e>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005c6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005c70:	431c      	orrs	r4, r3
 8005c72:	d108      	bne.n	8005c86 <__ieee754_pow+0x1de>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f7fa fb04 	bl	8000288 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	e78f      	b.n	8005ba6 <__ieee754_pow+0xfe>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f47f af2c 	bne.w	8005ae6 <__ieee754_pow+0x3e>
 8005c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c92:	4619      	mov	r1, r3
 8005c94:	e727      	b.n	8005ae6 <__ieee754_pow+0x3e>
 8005c96:	0feb      	lsrs	r3, r5, #31
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	9306      	str	r3, [sp, #24]
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	d102      	bne.n	8005caa <__ieee754_pow+0x202>
 8005ca4:	4632      	mov	r2, r6
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	e7e6      	b.n	8005c78 <__ieee754_pow+0x1d0>
 8005caa:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <__ieee754_pow+0x268>)
 8005cac:	4598      	cmp	r8, r3
 8005cae:	f340 80fb 	ble.w	8005ea8 <__ieee754_pow+0x400>
 8005cb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005cb6:	4598      	cmp	r8, r3
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <__ieee754_pow+0x260>)
 8005cba:	dd0c      	ble.n	8005cd6 <__ieee754_pow+0x22e>
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	dc0f      	bgt.n	8005ce0 <__ieee754_pow+0x238>
 8005cc0:	f1b9 0f00 	cmp.w	r9, #0
 8005cc4:	da0f      	bge.n	8005ce6 <__ieee754_pow+0x23e>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	b009      	add	sp, #36	; 0x24
 8005cca:	ecbd 8b06 	vpop	{d8-d10}
 8005cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd2:	f000 bcc2 	b.w	800665a <__math_oflow>
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	dbf2      	blt.n	8005cc0 <__ieee754_pow+0x218>
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <__ieee754_pow+0x25c>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	dd19      	ble.n	8005d14 <__ieee754_pow+0x26c>
 8005ce0:	f1b9 0f00 	cmp.w	r9, #0
 8005ce4:	dcef      	bgt.n	8005cc6 <__ieee754_pow+0x21e>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	b009      	add	sp, #36	; 0x24
 8005cea:	ecbd 8b06 	vpop	{d8-d10}
 8005cee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf2:	f000 bca9 	b.w	8006648 <__math_uflow>
 8005cf6:	bf00      	nop
 8005cf8:	fff00000 	.word	0xfff00000
 8005cfc:	7ff00000 	.word	0x7ff00000
 8005d00:	433fffff 	.word	0x433fffff
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	3fefffff 	.word	0x3fefffff
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	41e00000 	.word	0x41e00000
 8005d14:	4b60      	ldr	r3, [pc, #384]	; (8005e98 <__ieee754_pow+0x3f0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	f7fa fab6 	bl	8000288 <__aeabi_dsub>
 8005d1c:	a354      	add	r3, pc, #336	; (adr r3, 8005e70 <__ieee754_pow+0x3c8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4604      	mov	r4, r0
 8005d24:	460d      	mov	r5, r1
 8005d26:	f7fa fc67 	bl	80005f8 <__aeabi_dmul>
 8005d2a:	a353      	add	r3, pc, #332	; (adr r3, 8005e78 <__ieee754_pow+0x3d0>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	4606      	mov	r6, r0
 8005d32:	460f      	mov	r7, r1
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fc5e 	bl	80005f8 <__aeabi_dmul>
 8005d3c:	4b57      	ldr	r3, [pc, #348]	; (8005e9c <__ieee754_pow+0x3f4>)
 8005d3e:	4682      	mov	sl, r0
 8005d40:	468b      	mov	fp, r1
 8005d42:	2200      	movs	r2, #0
 8005d44:	4620      	mov	r0, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7fa fc56 	bl	80005f8 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	a14b      	add	r1, pc, #300	; (adr r1, 8005e80 <__ieee754_pow+0x3d8>)
 8005d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	2000      	movs	r0, #0
 8005d68:	494d      	ldr	r1, [pc, #308]	; (8005ea0 <__ieee754_pow+0x3f8>)
 8005d6a:	f7fa fa8d 	bl	8000288 <__aeabi_dsub>
 8005d6e:	4622      	mov	r2, r4
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	462b      	mov	r3, r5
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fc3d 	bl	80005f8 <__aeabi_dmul>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fc37 	bl	80005f8 <__aeabi_dmul>
 8005d8a:	a33f      	add	r3, pc, #252	; (adr r3, 8005e88 <__ieee754_pow+0x3e0>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa fc32 	bl	80005f8 <__aeabi_dmul>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fa74 	bl	8000288 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4680      	mov	r8, r0
 8005da6:	4689      	mov	r9, r1
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fa6e 	bl	800028c <__adddf3>
 8005db0:	2000      	movs	r0, #0
 8005db2:	4632      	mov	r2, r6
 8005db4:	463b      	mov	r3, r7
 8005db6:	4604      	mov	r4, r0
 8005db8:	460d      	mov	r5, r1
 8005dba:	f7fa fa65 	bl	8000288 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fa5f 	bl	8000288 <__aeabi_dsub>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	4682      	mov	sl, r0
 8005dd4:	468b      	mov	fp, r1
 8005dd6:	f040 81e7 	bne.w	80061a8 <__ieee754_pow+0x700>
 8005dda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005e90 <__ieee754_pow+0x3e8>
 8005dde:	eeb0 8a47 	vmov.f32	s16, s14
 8005de2:	eef0 8a67 	vmov.f32	s17, s15
 8005de6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005dea:	2600      	movs	r6, #0
 8005dec:	4632      	mov	r2, r6
 8005dee:	463b      	mov	r3, r7
 8005df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005df4:	f7fa fa48 	bl	8000288 <__aeabi_dsub>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	f7fa fbfc 	bl	80005f8 <__aeabi_dmul>
 8005e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e04:	4680      	mov	r8, r0
 8005e06:	4689      	mov	r9, r1
 8005e08:	4650      	mov	r0, sl
 8005e0a:	4659      	mov	r1, fp
 8005e0c:	f7fa fbf4 	bl	80005f8 <__aeabi_dmul>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4640      	mov	r0, r8
 8005e16:	4649      	mov	r1, r9
 8005e18:	f7fa fa38 	bl	800028c <__adddf3>
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	463b      	mov	r3, r7
 8005e20:	4680      	mov	r8, r0
 8005e22:	4689      	mov	r9, r1
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa fbe6 	bl	80005f8 <__aeabi_dmul>
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	4602      	mov	r2, r0
 8005e34:	4649      	mov	r1, r9
 8005e36:	4640      	mov	r0, r8
 8005e38:	f7fa fa28 	bl	800028c <__adddf3>
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <__ieee754_pow+0x3fc>)
 8005e3e:	4299      	cmp	r1, r3
 8005e40:	ec45 4b19 	vmov	d9, r4, r5
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	468b      	mov	fp, r1
 8005e4a:	f340 82f0 	ble.w	800642e <__ieee754_pow+0x986>
 8005e4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005e52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005e56:	4303      	orrs	r3, r0
 8005e58:	f000 81e4 	beq.w	8006224 <__ieee754_pow+0x77c>
 8005e5c:	ec51 0b18 	vmov	r0, r1, d8
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	f7fa fe3a 	bl	8000adc <__aeabi_dcmplt>
 8005e68:	3800      	subs	r0, #0
 8005e6a:	bf18      	it	ne
 8005e6c:	2001      	movne	r0, #1
 8005e6e:	e72b      	b.n	8005cc8 <__ieee754_pow+0x220>
 8005e70:	60000000 	.word	0x60000000
 8005e74:	3ff71547 	.word	0x3ff71547
 8005e78:	f85ddf44 	.word	0xf85ddf44
 8005e7c:	3e54ae0b 	.word	0x3e54ae0b
 8005e80:	55555555 	.word	0x55555555
 8005e84:	3fd55555 	.word	0x3fd55555
 8005e88:	652b82fe 	.word	0x652b82fe
 8005e8c:	3ff71547 	.word	0x3ff71547
 8005e90:	00000000 	.word	0x00000000
 8005e94:	bff00000 	.word	0xbff00000
 8005e98:	3ff00000 	.word	0x3ff00000
 8005e9c:	3fd00000 	.word	0x3fd00000
 8005ea0:	3fe00000 	.word	0x3fe00000
 8005ea4:	408fffff 	.word	0x408fffff
 8005ea8:	4bd5      	ldr	r3, [pc, #852]	; (8006200 <__ieee754_pow+0x758>)
 8005eaa:	402b      	ands	r3, r5
 8005eac:	2200      	movs	r2, #0
 8005eae:	b92b      	cbnz	r3, 8005ebc <__ieee754_pow+0x414>
 8005eb0:	4bd4      	ldr	r3, [pc, #848]	; (8006204 <__ieee754_pow+0x75c>)
 8005eb2:	f7fa fba1 	bl	80005f8 <__aeabi_dmul>
 8005eb6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005eba:	460c      	mov	r4, r1
 8005ebc:	1523      	asrs	r3, r4, #20
 8005ebe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ec2:	4413      	add	r3, r2
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	4bd0      	ldr	r3, [pc, #832]	; (8006208 <__ieee754_pow+0x760>)
 8005ec8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ecc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005ed6:	dd08      	ble.n	8005eea <__ieee754_pow+0x442>
 8005ed8:	4bcc      	ldr	r3, [pc, #816]	; (800620c <__ieee754_pow+0x764>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	f340 8162 	ble.w	80061a4 <__ieee754_pow+0x6fc>
 8005ee0:	9b05      	ldr	r3, [sp, #20]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005eea:	2400      	movs	r4, #0
 8005eec:	00e3      	lsls	r3, r4, #3
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	4bc7      	ldr	r3, [pc, #796]	; (8006210 <__ieee754_pow+0x768>)
 8005ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef6:	ed93 7b00 	vldr	d7, [r3]
 8005efa:	4629      	mov	r1, r5
 8005efc:	ec53 2b17 	vmov	r2, r3, d7
 8005f00:	eeb0 9a47 	vmov.f32	s18, s14
 8005f04:	eef0 9a67 	vmov.f32	s19, s15
 8005f08:	4682      	mov	sl, r0
 8005f0a:	f7fa f9bd 	bl	8000288 <__aeabi_dsub>
 8005f0e:	4652      	mov	r2, sl
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	462b      	mov	r3, r5
 8005f16:	ec51 0b19 	vmov	r0, r1, d9
 8005f1a:	f7fa f9b7 	bl	800028c <__adddf3>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	2000      	movs	r0, #0
 8005f24:	49bb      	ldr	r1, [pc, #748]	; (8006214 <__ieee754_pow+0x76c>)
 8005f26:	f7fa fc91 	bl	800084c <__aeabi_ddiv>
 8005f2a:	ec41 0b1a 	vmov	d10, r0, r1
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4630      	mov	r0, r6
 8005f34:	4639      	mov	r1, r7
 8005f36:	f7fa fb5f 	bl	80005f8 <__aeabi_dmul>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f46:	46ab      	mov	fp, r5
 8005f48:	106d      	asrs	r5, r5, #1
 8005f4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005f4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005f52:	ec41 0b18 	vmov	d8, r0, r1
 8005f56:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	f7fa fb48 	bl	80005f8 <__aeabi_dmul>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fa f98a 	bl	8000288 <__aeabi_dsub>
 8005f74:	ec53 2b19 	vmov	r2, r3, d9
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa f982 	bl	8000288 <__aeabi_dsub>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4650      	mov	r0, sl
 8005f8a:	4659      	mov	r1, fp
 8005f8c:	f7fa f97c 	bl	8000288 <__aeabi_dsub>
 8005f90:	4642      	mov	r2, r8
 8005f92:	464b      	mov	r3, r9
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa f972 	bl	8000288 <__aeabi_dsub>
 8005fa4:	ec53 2b1a 	vmov	r2, r3, d10
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	ec53 2b18 	vmov	r2, r3, d8
 8005fb0:	ec41 0b19 	vmov	d9, r0, r1
 8005fb4:	ec51 0b18 	vmov	r0, r1, d8
 8005fb8:	f7fa fb1e 	bl	80005f8 <__aeabi_dmul>
 8005fbc:	a37c      	add	r3, pc, #496	; (adr r3, 80061b0 <__ieee754_pow+0x708>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	a37b      	add	r3, pc, #492	; (adr r3, 80061b8 <__ieee754_pow+0x710>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f95c 	bl	800028c <__adddf3>
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f7fa fb0e 	bl	80005f8 <__aeabi_dmul>
 8005fdc:	a378      	add	r3, pc, #480	; (adr r3, 80061c0 <__ieee754_pow+0x718>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f7fa f953 	bl	800028c <__adddf3>
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	a376      	add	r3, pc, #472	; (adr r3, 80061c8 <__ieee754_pow+0x720>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa f94a 	bl	800028c <__adddf3>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	f7fa fafc 	bl	80005f8 <__aeabi_dmul>
 8006000:	a373      	add	r3, pc, #460	; (adr r3, 80061d0 <__ieee754_pow+0x728>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f941 	bl	800028c <__adddf3>
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f7fa faf3 	bl	80005f8 <__aeabi_dmul>
 8006012:	a371      	add	r3, pc, #452	; (adr r3, 80061d8 <__ieee754_pow+0x730>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f938 	bl	800028c <__adddf3>
 800601c:	4622      	mov	r2, r4
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	462b      	mov	r3, r5
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	f7fa fae0 	bl	80005f8 <__aeabi_dmul>
 8006038:	4642      	mov	r2, r8
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
 800603e:	464b      	mov	r3, r9
 8006040:	ec51 0b18 	vmov	r0, r1, d8
 8006044:	f7fa f922 	bl	800028c <__adddf3>
 8006048:	ec53 2b19 	vmov	r2, r3, d9
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	4622      	mov	r2, r4
 8006052:	462b      	mov	r3, r5
 8006054:	f7fa f91a 	bl	800028c <__adddf3>
 8006058:	4642      	mov	r2, r8
 800605a:	4682      	mov	sl, r0
 800605c:	468b      	mov	fp, r1
 800605e:	464b      	mov	r3, r9
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa fac8 	bl	80005f8 <__aeabi_dmul>
 8006068:	4b6b      	ldr	r3, [pc, #428]	; (8006218 <__ieee754_pow+0x770>)
 800606a:	2200      	movs	r2, #0
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	f7fa f90c 	bl	800028c <__adddf3>
 8006074:	4652      	mov	r2, sl
 8006076:	465b      	mov	r3, fp
 8006078:	f7fa f908 	bl	800028c <__adddf3>
 800607c:	2000      	movs	r0, #0
 800607e:	4604      	mov	r4, r0
 8006080:	460d      	mov	r5, r1
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa fab5 	bl	80005f8 <__aeabi_dmul>
 800608e:	4b62      	ldr	r3, [pc, #392]	; (8006218 <__ieee754_pow+0x770>)
 8006090:	4680      	mov	r8, r0
 8006092:	4689      	mov	r9, r1
 8006094:	2200      	movs	r2, #0
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa f8f5 	bl	8000288 <__aeabi_dsub>
 800609e:	4632      	mov	r2, r6
 80060a0:	463b      	mov	r3, r7
 80060a2:	f7fa f8f1 	bl	8000288 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4650      	mov	r0, sl
 80060ac:	4659      	mov	r1, fp
 80060ae:	f7fa f8eb 	bl	8000288 <__aeabi_dsub>
 80060b2:	ec53 2b18 	vmov	r2, r3, d8
 80060b6:	f7fa fa9f 	bl	80005f8 <__aeabi_dmul>
 80060ba:	4622      	mov	r2, r4
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	462b      	mov	r3, r5
 80060c2:	ec51 0b19 	vmov	r0, r1, d9
 80060c6:	f7fa fa97 	bl	80005f8 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa f8db 	bl	800028c <__adddf3>
 80060d6:	4606      	mov	r6, r0
 80060d8:	460f      	mov	r7, r1
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa f8d3 	bl	800028c <__adddf3>
 80060e6:	a33e      	add	r3, pc, #248	; (adr r3, 80061e0 <__ieee754_pow+0x738>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	2000      	movs	r0, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	460d      	mov	r5, r1
 80060f2:	f7fa fa81 	bl	80005f8 <__aeabi_dmul>
 80060f6:	4642      	mov	r2, r8
 80060f8:	ec41 0b18 	vmov	d8, r0, r1
 80060fc:	464b      	mov	r3, r9
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa f8c1 	bl	8000288 <__aeabi_dsub>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4630      	mov	r0, r6
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	a335      	add	r3, pc, #212	; (adr r3, 80061e8 <__ieee754_pow+0x740>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa fa6e 	bl	80005f8 <__aeabi_dmul>
 800611c:	a334      	add	r3, pc, #208	; (adr r3, 80061f0 <__ieee754_pow+0x748>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	4606      	mov	r6, r0
 8006124:	460f      	mov	r7, r1
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fa65 	bl	80005f8 <__aeabi_dmul>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4630      	mov	r0, r6
 8006134:	4639      	mov	r1, r7
 8006136:	f7fa f8a9 	bl	800028c <__adddf3>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <__ieee754_pow+0x774>)
 800613e:	4413      	add	r3, r2
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa f8a2 	bl	800028c <__adddf3>
 8006148:	4682      	mov	sl, r0
 800614a:	9805      	ldr	r0, [sp, #20]
 800614c:	468b      	mov	fp, r1
 800614e:	f7fa f9e9 	bl	8000524 <__aeabi_i2d>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	4b32      	ldr	r3, [pc, #200]	; (8006220 <__ieee754_pow+0x778>)
 8006156:	4413      	add	r3, r2
 8006158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	4652      	mov	r2, sl
 8006162:	465b      	mov	r3, fp
 8006164:	ec51 0b18 	vmov	r0, r1, d8
 8006168:	f7fa f890 	bl	800028c <__adddf3>
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	f7fa f88c 	bl	800028c <__adddf3>
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	f7fa f888 	bl	800028c <__adddf3>
 800617c:	2000      	movs	r0, #0
 800617e:	4632      	mov	r2, r6
 8006180:	463b      	mov	r3, r7
 8006182:	4604      	mov	r4, r0
 8006184:	460d      	mov	r5, r1
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	4642      	mov	r2, r8
 800618c:	464b      	mov	r3, r9
 800618e:	f7fa f87b 	bl	8000288 <__aeabi_dsub>
 8006192:	ec53 2b18 	vmov	r2, r3, d8
 8006196:	f7fa f877 	bl	8000288 <__aeabi_dsub>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4650      	mov	r0, sl
 80061a0:	4659      	mov	r1, fp
 80061a2:	e610      	b.n	8005dc6 <__ieee754_pow+0x31e>
 80061a4:	2401      	movs	r4, #1
 80061a6:	e6a1      	b.n	8005eec <__ieee754_pow+0x444>
 80061a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80061f8 <__ieee754_pow+0x750>
 80061ac:	e617      	b.n	8005dde <__ieee754_pow+0x336>
 80061ae:	bf00      	nop
 80061b0:	4a454eef 	.word	0x4a454eef
 80061b4:	3fca7e28 	.word	0x3fca7e28
 80061b8:	93c9db65 	.word	0x93c9db65
 80061bc:	3fcd864a 	.word	0x3fcd864a
 80061c0:	a91d4101 	.word	0xa91d4101
 80061c4:	3fd17460 	.word	0x3fd17460
 80061c8:	518f264d 	.word	0x518f264d
 80061cc:	3fd55555 	.word	0x3fd55555
 80061d0:	db6fabff 	.word	0xdb6fabff
 80061d4:	3fdb6db6 	.word	0x3fdb6db6
 80061d8:	33333303 	.word	0x33333303
 80061dc:	3fe33333 	.word	0x3fe33333
 80061e0:	e0000000 	.word	0xe0000000
 80061e4:	3feec709 	.word	0x3feec709
 80061e8:	dc3a03fd 	.word	0xdc3a03fd
 80061ec:	3feec709 	.word	0x3feec709
 80061f0:	145b01f5 	.word	0x145b01f5
 80061f4:	be3e2fe0 	.word	0xbe3e2fe0
 80061f8:	00000000 	.word	0x00000000
 80061fc:	3ff00000 	.word	0x3ff00000
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	43400000 	.word	0x43400000
 8006208:	0003988e 	.word	0x0003988e
 800620c:	000bb679 	.word	0x000bb679
 8006210:	08006978 	.word	0x08006978
 8006214:	3ff00000 	.word	0x3ff00000
 8006218:	40080000 	.word	0x40080000
 800621c:	08006998 	.word	0x08006998
 8006220:	08006988 	.word	0x08006988
 8006224:	a3b3      	add	r3, pc, #716	; (adr r3, 80064f4 <__ieee754_pow+0xa4c>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	4640      	mov	r0, r8
 800622c:	4649      	mov	r1, r9
 800622e:	f7fa f82d 	bl	800028c <__adddf3>
 8006232:	4622      	mov	r2, r4
 8006234:	ec41 0b1a 	vmov	d10, r0, r1
 8006238:	462b      	mov	r3, r5
 800623a:	4630      	mov	r0, r6
 800623c:	4639      	mov	r1, r7
 800623e:	f7fa f823 	bl	8000288 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	ec51 0b1a 	vmov	r0, r1, d10
 800624a:	f7fa fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f47f ae04 	bne.w	8005e5c <__ieee754_pow+0x3b4>
 8006254:	4aa2      	ldr	r2, [pc, #648]	; (80064e0 <__ieee754_pow+0xa38>)
 8006256:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800625a:	4293      	cmp	r3, r2
 800625c:	f340 8107 	ble.w	800646e <__ieee754_pow+0x9c6>
 8006260:	151b      	asrs	r3, r3, #20
 8006262:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006266:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800626a:	fa4a fa03 	asr.w	sl, sl, r3
 800626e:	44da      	add	sl, fp
 8006270:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006274:	489b      	ldr	r0, [pc, #620]	; (80064e4 <__ieee754_pow+0xa3c>)
 8006276:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800627a:	4108      	asrs	r0, r1
 800627c:	ea00 030a 	and.w	r3, r0, sl
 8006280:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006284:	f1c1 0114 	rsb	r1, r1, #20
 8006288:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800628c:	fa4a fa01 	asr.w	sl, sl, r1
 8006290:	f1bb 0f00 	cmp.w	fp, #0
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	bfb8      	it	lt
 800629e:	f1ca 0a00 	rsblt	sl, sl, #0
 80062a2:	f7f9 fff1 	bl	8000288 <__aeabi_dsub>
 80062a6:	ec41 0b19 	vmov	d9, r0, r1
 80062aa:	4642      	mov	r2, r8
 80062ac:	464b      	mov	r3, r9
 80062ae:	ec51 0b19 	vmov	r0, r1, d9
 80062b2:	f7f9 ffeb 	bl	800028c <__adddf3>
 80062b6:	a37a      	add	r3, pc, #488	; (adr r3, 80064a0 <__ieee754_pow+0x9f8>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	2000      	movs	r0, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	f7fa f999 	bl	80005f8 <__aeabi_dmul>
 80062c6:	ec53 2b19 	vmov	r2, r3, d9
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7f9 ffd9 	bl	8000288 <__aeabi_dsub>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	a371      	add	r3, pc, #452	; (adr r3, 80064a8 <__ieee754_pow+0xa00>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7fa f986 	bl	80005f8 <__aeabi_dmul>
 80062ec:	a370      	add	r3, pc, #448	; (adr r3, 80064b0 <__ieee754_pow+0xa08>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7fa f97d 	bl	80005f8 <__aeabi_dmul>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7f9 ffc1 	bl	800028c <__adddf3>
 800630a:	4604      	mov	r4, r0
 800630c:	460d      	mov	r5, r1
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7f9 ffb9 	bl	800028c <__adddf3>
 800631a:	4632      	mov	r2, r6
 800631c:	463b      	mov	r3, r7
 800631e:	4680      	mov	r8, r0
 8006320:	4689      	mov	r9, r1
 8006322:	f7f9 ffb1 	bl	8000288 <__aeabi_dsub>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4620      	mov	r0, r4
 800632c:	4629      	mov	r1, r5
 800632e:	f7f9 ffab 	bl	8000288 <__aeabi_dsub>
 8006332:	4642      	mov	r2, r8
 8006334:	4606      	mov	r6, r0
 8006336:	460f      	mov	r7, r1
 8006338:	464b      	mov	r3, r9
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f95b 	bl	80005f8 <__aeabi_dmul>
 8006342:	a35d      	add	r3, pc, #372	; (adr r3, 80064b8 <__ieee754_pow+0xa10>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	a35b      	add	r3, pc, #364	; (adr r3, 80064c0 <__ieee754_pow+0xa18>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ff97 	bl	8000288 <__aeabi_dsub>
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	f7fa f94b 	bl	80005f8 <__aeabi_dmul>
 8006362:	a359      	add	r3, pc, #356	; (adr r3, 80064c8 <__ieee754_pow+0xa20>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7f9 ff90 	bl	800028c <__adddf3>
 800636c:	4622      	mov	r2, r4
 800636e:	462b      	mov	r3, r5
 8006370:	f7fa f942 	bl	80005f8 <__aeabi_dmul>
 8006374:	a356      	add	r3, pc, #344	; (adr r3, 80064d0 <__ieee754_pow+0xa28>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ff85 	bl	8000288 <__aeabi_dsub>
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	f7fa f939 	bl	80005f8 <__aeabi_dmul>
 8006386:	a354      	add	r3, pc, #336	; (adr r3, 80064d8 <__ieee754_pow+0xa30>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff7e 	bl	800028c <__adddf3>
 8006390:	4622      	mov	r2, r4
 8006392:	462b      	mov	r3, r5
 8006394:	f7fa f930 	bl	80005f8 <__aeabi_dmul>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7f9 ff72 	bl	8000288 <__aeabi_dsub>
 80063a4:	4604      	mov	r4, r0
 80063a6:	460d      	mov	r5, r1
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa f922 	bl	80005f8 <__aeabi_dmul>
 80063b4:	2200      	movs	r2, #0
 80063b6:	ec41 0b19 	vmov	d9, r0, r1
 80063ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063be:	4620      	mov	r0, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	f7f9 ff61 	bl	8000288 <__aeabi_dsub>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	ec51 0b19 	vmov	r0, r1, d9
 80063ce:	f7fa fa3d 	bl	800084c <__aeabi_ddiv>
 80063d2:	4632      	mov	r2, r6
 80063d4:	4604      	mov	r4, r0
 80063d6:	460d      	mov	r5, r1
 80063d8:	463b      	mov	r3, r7
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa f90b 	bl	80005f8 <__aeabi_dmul>
 80063e2:	4632      	mov	r2, r6
 80063e4:	463b      	mov	r3, r7
 80063e6:	f7f9 ff51 	bl	800028c <__adddf3>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4620      	mov	r0, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7f9 ff49 	bl	8000288 <__aeabi_dsub>
 80063f6:	4642      	mov	r2, r8
 80063f8:	464b      	mov	r3, r9
 80063fa:	f7f9 ff45 	bl	8000288 <__aeabi_dsub>
 80063fe:	460b      	mov	r3, r1
 8006400:	4602      	mov	r2, r0
 8006402:	4939      	ldr	r1, [pc, #228]	; (80064e8 <__ieee754_pow+0xa40>)
 8006404:	2000      	movs	r0, #0
 8006406:	f7f9 ff3f 	bl	8000288 <__aeabi_dsub>
 800640a:	ec41 0b10 	vmov	d0, r0, r1
 800640e:	ee10 3a90 	vmov	r3, s1
 8006412:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641a:	da2b      	bge.n	8006474 <__ieee754_pow+0x9cc>
 800641c:	4650      	mov	r0, sl
 800641e:	f000 f877 	bl	8006510 <scalbn>
 8006422:	ec51 0b10 	vmov	r0, r1, d0
 8006426:	ec53 2b18 	vmov	r2, r3, d8
 800642a:	f7ff bbee 	b.w	8005c0a <__ieee754_pow+0x162>
 800642e:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <__ieee754_pow+0xa44>)
 8006430:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006434:	429e      	cmp	r6, r3
 8006436:	f77f af0d 	ble.w	8006254 <__ieee754_pow+0x7ac>
 800643a:	4b2d      	ldr	r3, [pc, #180]	; (80064f0 <__ieee754_pow+0xa48>)
 800643c:	440b      	add	r3, r1
 800643e:	4303      	orrs	r3, r0
 8006440:	d009      	beq.n	8006456 <__ieee754_pow+0x9ae>
 8006442:	ec51 0b18 	vmov	r0, r1, d8
 8006446:	2200      	movs	r2, #0
 8006448:	2300      	movs	r3, #0
 800644a:	f7fa fb47 	bl	8000adc <__aeabi_dcmplt>
 800644e:	3800      	subs	r0, #0
 8006450:	bf18      	it	ne
 8006452:	2001      	movne	r0, #1
 8006454:	e448      	b.n	8005ce8 <__ieee754_pow+0x240>
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	f7f9 ff15 	bl	8000288 <__aeabi_dsub>
 800645e:	4642      	mov	r2, r8
 8006460:	464b      	mov	r3, r9
 8006462:	f7fa fb4f 	bl	8000b04 <__aeabi_dcmpge>
 8006466:	2800      	cmp	r0, #0
 8006468:	f43f aef4 	beq.w	8006254 <__ieee754_pow+0x7ac>
 800646c:	e7e9      	b.n	8006442 <__ieee754_pow+0x99a>
 800646e:	f04f 0a00 	mov.w	sl, #0
 8006472:	e71a      	b.n	80062aa <__ieee754_pow+0x802>
 8006474:	ec51 0b10 	vmov	r0, r1, d0
 8006478:	4619      	mov	r1, r3
 800647a:	e7d4      	b.n	8006426 <__ieee754_pow+0x97e>
 800647c:	491a      	ldr	r1, [pc, #104]	; (80064e8 <__ieee754_pow+0xa40>)
 800647e:	2000      	movs	r0, #0
 8006480:	f7ff bb31 	b.w	8005ae6 <__ieee754_pow+0x3e>
 8006484:	2000      	movs	r0, #0
 8006486:	2100      	movs	r1, #0
 8006488:	f7ff bb2d 	b.w	8005ae6 <__ieee754_pow+0x3e>
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7ff bb29 	b.w	8005ae6 <__ieee754_pow+0x3e>
 8006494:	9204      	str	r2, [sp, #16]
 8006496:	f7ff bb7b 	b.w	8005b90 <__ieee754_pow+0xe8>
 800649a:	2300      	movs	r3, #0
 800649c:	f7ff bb65 	b.w	8005b6a <__ieee754_pow+0xc2>
 80064a0:	00000000 	.word	0x00000000
 80064a4:	3fe62e43 	.word	0x3fe62e43
 80064a8:	fefa39ef 	.word	0xfefa39ef
 80064ac:	3fe62e42 	.word	0x3fe62e42
 80064b0:	0ca86c39 	.word	0x0ca86c39
 80064b4:	be205c61 	.word	0xbe205c61
 80064b8:	72bea4d0 	.word	0x72bea4d0
 80064bc:	3e663769 	.word	0x3e663769
 80064c0:	c5d26bf1 	.word	0xc5d26bf1
 80064c4:	3ebbbd41 	.word	0x3ebbbd41
 80064c8:	af25de2c 	.word	0xaf25de2c
 80064cc:	3f11566a 	.word	0x3f11566a
 80064d0:	16bebd93 	.word	0x16bebd93
 80064d4:	3f66c16c 	.word	0x3f66c16c
 80064d8:	5555553e 	.word	0x5555553e
 80064dc:	3fc55555 	.word	0x3fc55555
 80064e0:	3fe00000 	.word	0x3fe00000
 80064e4:	fff00000 	.word	0xfff00000
 80064e8:	3ff00000 	.word	0x3ff00000
 80064ec:	4090cbff 	.word	0x4090cbff
 80064f0:	3f6f3400 	.word	0x3f6f3400
 80064f4:	652b82fe 	.word	0x652b82fe
 80064f8:	3c971547 	.word	0x3c971547

080064fc <fabs>:
 80064fc:	ec51 0b10 	vmov	r0, r1, d0
 8006500:	ee10 2a10 	vmov	r2, s0
 8006504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006508:	ec43 2b10 	vmov	d0, r2, r3
 800650c:	4770      	bx	lr
	...

08006510 <scalbn>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	ec55 4b10 	vmov	r4, r5, d0
 8006516:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800651a:	4606      	mov	r6, r0
 800651c:	462b      	mov	r3, r5
 800651e:	b999      	cbnz	r1, 8006548 <scalbn+0x38>
 8006520:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006524:	4323      	orrs	r3, r4
 8006526:	d03f      	beq.n	80065a8 <scalbn+0x98>
 8006528:	4b35      	ldr	r3, [pc, #212]	; (8006600 <scalbn+0xf0>)
 800652a:	4629      	mov	r1, r5
 800652c:	ee10 0a10 	vmov	r0, s0
 8006530:	2200      	movs	r2, #0
 8006532:	f7fa f861 	bl	80005f8 <__aeabi_dmul>
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <scalbn+0xf4>)
 8006538:	429e      	cmp	r6, r3
 800653a:	4604      	mov	r4, r0
 800653c:	460d      	mov	r5, r1
 800653e:	da10      	bge.n	8006562 <scalbn+0x52>
 8006540:	a327      	add	r3, pc, #156	; (adr r3, 80065e0 <scalbn+0xd0>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	e01f      	b.n	8006588 <scalbn+0x78>
 8006548:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800654c:	4291      	cmp	r1, r2
 800654e:	d10c      	bne.n	800656a <scalbn+0x5a>
 8006550:	ee10 2a10 	vmov	r2, s0
 8006554:	4620      	mov	r0, r4
 8006556:	4629      	mov	r1, r5
 8006558:	f7f9 fe98 	bl	800028c <__adddf3>
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
 8006560:	e022      	b.n	80065a8 <scalbn+0x98>
 8006562:	460b      	mov	r3, r1
 8006564:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006568:	3936      	subs	r1, #54	; 0x36
 800656a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800656e:	4296      	cmp	r6, r2
 8006570:	dd0d      	ble.n	800658e <scalbn+0x7e>
 8006572:	2d00      	cmp	r5, #0
 8006574:	a11c      	add	r1, pc, #112	; (adr r1, 80065e8 <scalbn+0xd8>)
 8006576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800657a:	da02      	bge.n	8006582 <scalbn+0x72>
 800657c:	a11c      	add	r1, pc, #112	; (adr r1, 80065f0 <scalbn+0xe0>)
 800657e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006582:	a319      	add	r3, pc, #100	; (adr r3, 80065e8 <scalbn+0xd8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7fa f836 	bl	80005f8 <__aeabi_dmul>
 800658c:	e7e6      	b.n	800655c <scalbn+0x4c>
 800658e:	1872      	adds	r2, r6, r1
 8006590:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006594:	428a      	cmp	r2, r1
 8006596:	dcec      	bgt.n	8006572 <scalbn+0x62>
 8006598:	2a00      	cmp	r2, #0
 800659a:	dd08      	ble.n	80065ae <scalbn+0x9e>
 800659c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065a8:	ec45 4b10 	vmov	d0, r4, r5
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80065b2:	da08      	bge.n	80065c6 <scalbn+0xb6>
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	a10a      	add	r1, pc, #40	; (adr r1, 80065e0 <scalbn+0xd0>)
 80065b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065bc:	dac0      	bge.n	8006540 <scalbn+0x30>
 80065be:	a10e      	add	r1, pc, #56	; (adr r1, 80065f8 <scalbn+0xe8>)
 80065c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065c4:	e7bc      	b.n	8006540 <scalbn+0x30>
 80065c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065ca:	3236      	adds	r2, #54	; 0x36
 80065cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80065d4:	4620      	mov	r0, r4
 80065d6:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <scalbn+0xf8>)
 80065d8:	2200      	movs	r2, #0
 80065da:	e7d5      	b.n	8006588 <scalbn+0x78>
 80065dc:	f3af 8000 	nop.w
 80065e0:	c2f8f359 	.word	0xc2f8f359
 80065e4:	01a56e1f 	.word	0x01a56e1f
 80065e8:	8800759c 	.word	0x8800759c
 80065ec:	7e37e43c 	.word	0x7e37e43c
 80065f0:	8800759c 	.word	0x8800759c
 80065f4:	fe37e43c 	.word	0xfe37e43c
 80065f8:	c2f8f359 	.word	0xc2f8f359
 80065fc:	81a56e1f 	.word	0x81a56e1f
 8006600:	43500000 	.word	0x43500000
 8006604:	ffff3cb0 	.word	0xffff3cb0
 8006608:	3c900000 	.word	0x3c900000

0800660c <with_errno>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	4616      	mov	r6, r2
 8006614:	f7fe fd50 	bl	80050b8 <__errno>
 8006618:	4629      	mov	r1, r5
 800661a:	6006      	str	r6, [r0, #0]
 800661c:	4620      	mov	r0, r4
 800661e:	bd70      	pop	{r4, r5, r6, pc}

08006620 <xflow>:
 8006620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006622:	4614      	mov	r4, r2
 8006624:	461d      	mov	r5, r3
 8006626:	b108      	cbz	r0, 800662c <xflow+0xc>
 8006628:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800662c:	e9cd 2300 	strd	r2, r3, [sp]
 8006630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 ffde 	bl	80005f8 <__aeabi_dmul>
 800663c:	2222      	movs	r2, #34	; 0x22
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006644:	f7ff bfe2 	b.w	800660c <with_errno>

08006648 <__math_uflow>:
 8006648:	b508      	push	{r3, lr}
 800664a:	2200      	movs	r2, #0
 800664c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006650:	f7ff ffe6 	bl	8006620 <xflow>
 8006654:	ec41 0b10 	vmov	d0, r0, r1
 8006658:	bd08      	pop	{r3, pc}

0800665a <__math_oflow>:
 800665a:	b508      	push	{r3, lr}
 800665c:	2200      	movs	r2, #0
 800665e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006662:	f7ff ffdd 	bl	8006620 <xflow>
 8006666:	ec41 0b10 	vmov	d0, r0, r1
 800666a:	bd08      	pop	{r3, pc}

0800666c <__ieee754_sqrt>:
 800666c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	ec55 4b10 	vmov	r4, r5, d0
 8006674:	4e67      	ldr	r6, [pc, #412]	; (8006814 <__ieee754_sqrt+0x1a8>)
 8006676:	43ae      	bics	r6, r5
 8006678:	ee10 0a10 	vmov	r0, s0
 800667c:	ee10 2a10 	vmov	r2, s0
 8006680:	4629      	mov	r1, r5
 8006682:	462b      	mov	r3, r5
 8006684:	d10d      	bne.n	80066a2 <__ieee754_sqrt+0x36>
 8006686:	f7f9 ffb7 	bl	80005f8 <__aeabi_dmul>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 fdfb 	bl	800028c <__adddf3>
 8006696:	4604      	mov	r4, r0
 8006698:	460d      	mov	r5, r1
 800669a:	ec45 4b10 	vmov	d0, r4, r5
 800669e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	dc0b      	bgt.n	80066be <__ieee754_sqrt+0x52>
 80066a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80066aa:	4326      	orrs	r6, r4
 80066ac:	d0f5      	beq.n	800669a <__ieee754_sqrt+0x2e>
 80066ae:	b135      	cbz	r5, 80066be <__ieee754_sqrt+0x52>
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_dsub>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	f7fa f8c8 	bl	800084c <__aeabi_ddiv>
 80066bc:	e7eb      	b.n	8006696 <__ieee754_sqrt+0x2a>
 80066be:	1509      	asrs	r1, r1, #20
 80066c0:	f000 808d 	beq.w	80067de <__ieee754_sqrt+0x172>
 80066c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80066cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d0:	07c9      	lsls	r1, r1, #31
 80066d2:	bf5c      	itt	pl
 80066d4:	005b      	lslpl	r3, r3, #1
 80066d6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80066da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066de:	bf58      	it	pl
 80066e0:	0052      	lslpl	r2, r2, #1
 80066e2:	2500      	movs	r5, #0
 80066e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80066e8:	1076      	asrs	r6, r6, #1
 80066ea:	0052      	lsls	r2, r2, #1
 80066ec:	f04f 0e16 	mov.w	lr, #22
 80066f0:	46ac      	mov	ip, r5
 80066f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066f6:	eb0c 0001 	add.w	r0, ip, r1
 80066fa:	4298      	cmp	r0, r3
 80066fc:	bfde      	ittt	le
 80066fe:	1a1b      	suble	r3, r3, r0
 8006700:	eb00 0c01 	addle.w	ip, r0, r1
 8006704:	186d      	addle	r5, r5, r1
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	f1be 0e01 	subs.w	lr, lr, #1
 800670c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006710:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006714:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006718:	d1ed      	bne.n	80066f6 <__ieee754_sqrt+0x8a>
 800671a:	4674      	mov	r4, lr
 800671c:	2720      	movs	r7, #32
 800671e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006722:	4563      	cmp	r3, ip
 8006724:	eb01 000e 	add.w	r0, r1, lr
 8006728:	dc02      	bgt.n	8006730 <__ieee754_sqrt+0xc4>
 800672a:	d113      	bne.n	8006754 <__ieee754_sqrt+0xe8>
 800672c:	4290      	cmp	r0, r2
 800672e:	d811      	bhi.n	8006754 <__ieee754_sqrt+0xe8>
 8006730:	2800      	cmp	r0, #0
 8006732:	eb00 0e01 	add.w	lr, r0, r1
 8006736:	da57      	bge.n	80067e8 <__ieee754_sqrt+0x17c>
 8006738:	f1be 0f00 	cmp.w	lr, #0
 800673c:	db54      	blt.n	80067e8 <__ieee754_sqrt+0x17c>
 800673e:	f10c 0801 	add.w	r8, ip, #1
 8006742:	eba3 030c 	sub.w	r3, r3, ip
 8006746:	4290      	cmp	r0, r2
 8006748:	bf88      	it	hi
 800674a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800674e:	1a12      	subs	r2, r2, r0
 8006750:	440c      	add	r4, r1
 8006752:	46c4      	mov	ip, r8
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	3f01      	subs	r7, #1
 8006758:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800675c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006760:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006764:	d1dd      	bne.n	8006722 <__ieee754_sqrt+0xb6>
 8006766:	4313      	orrs	r3, r2
 8006768:	d01b      	beq.n	80067a2 <__ieee754_sqrt+0x136>
 800676a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006818 <__ieee754_sqrt+0x1ac>
 800676e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800681c <__ieee754_sqrt+0x1b0>
 8006772:	e9da 0100 	ldrd	r0, r1, [sl]
 8006776:	e9db 2300 	ldrd	r2, r3, [fp]
 800677a:	f7f9 fd85 	bl	8000288 <__aeabi_dsub>
 800677e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4640      	mov	r0, r8
 8006788:	4649      	mov	r1, r9
 800678a:	f7fa f9b1 	bl	8000af0 <__aeabi_dcmple>
 800678e:	b140      	cbz	r0, 80067a2 <__ieee754_sqrt+0x136>
 8006790:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006794:	e9da 0100 	ldrd	r0, r1, [sl]
 8006798:	e9db 2300 	ldrd	r2, r3, [fp]
 800679c:	d126      	bne.n	80067ec <__ieee754_sqrt+0x180>
 800679e:	3501      	adds	r5, #1
 80067a0:	463c      	mov	r4, r7
 80067a2:	106a      	asrs	r2, r5, #1
 80067a4:	0863      	lsrs	r3, r4, #1
 80067a6:	07e9      	lsls	r1, r5, #31
 80067a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80067ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80067b0:	bf48      	it	mi
 80067b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80067b6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80067ba:	461c      	mov	r4, r3
 80067bc:	e76d      	b.n	800669a <__ieee754_sqrt+0x2e>
 80067be:	0ad3      	lsrs	r3, r2, #11
 80067c0:	3815      	subs	r0, #21
 80067c2:	0552      	lsls	r2, r2, #21
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0fa      	beq.n	80067be <__ieee754_sqrt+0x152>
 80067c8:	02dc      	lsls	r4, r3, #11
 80067ca:	d50a      	bpl.n	80067e2 <__ieee754_sqrt+0x176>
 80067cc:	f1c1 0420 	rsb	r4, r1, #32
 80067d0:	fa22 f404 	lsr.w	r4, r2, r4
 80067d4:	1e4d      	subs	r5, r1, #1
 80067d6:	408a      	lsls	r2, r1
 80067d8:	4323      	orrs	r3, r4
 80067da:	1b41      	subs	r1, r0, r5
 80067dc:	e772      	b.n	80066c4 <__ieee754_sqrt+0x58>
 80067de:	4608      	mov	r0, r1
 80067e0:	e7f0      	b.n	80067c4 <__ieee754_sqrt+0x158>
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	3101      	adds	r1, #1
 80067e6:	e7ef      	b.n	80067c8 <__ieee754_sqrt+0x15c>
 80067e8:	46e0      	mov	r8, ip
 80067ea:	e7aa      	b.n	8006742 <__ieee754_sqrt+0xd6>
 80067ec:	f7f9 fd4e 	bl	800028c <__adddf3>
 80067f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4640      	mov	r0, r8
 80067fa:	4649      	mov	r1, r9
 80067fc:	f7fa f96e 	bl	8000adc <__aeabi_dcmplt>
 8006800:	b120      	cbz	r0, 800680c <__ieee754_sqrt+0x1a0>
 8006802:	1ca0      	adds	r0, r4, #2
 8006804:	bf08      	it	eq
 8006806:	3501      	addeq	r5, #1
 8006808:	3402      	adds	r4, #2
 800680a:	e7ca      	b.n	80067a2 <__ieee754_sqrt+0x136>
 800680c:	3401      	adds	r4, #1
 800680e:	f024 0401 	bic.w	r4, r4, #1
 8006812:	e7c6      	b.n	80067a2 <__ieee754_sqrt+0x136>
 8006814:	7ff00000 	.word	0x7ff00000
 8006818:	20000060 	.word	0x20000060
 800681c:	20000068 	.word	0x20000068

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
